# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015-2017, Rapptz
# This file is distributed under the same license as the discord.py package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: discord.py 1.0.0a\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-09-24 23:41-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: 竹内 歩夢 <take000a@gmail.com>, 2018\n"
"Language: ja_JP\n"
"Language-Team: Japanese (Japan) (https://www.transifex.com/discord-"
"py/teams/88924/ja_JP/)\n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"

#: ../../ext/commands/api.rst:4
msgid "API Reference"
msgstr "APIリファレンス"

#: ../../ext/commands/api.rst:6
msgid ""
"The following section outlines the API of discord.py's command extension "
"module."
msgstr "この項目ではdiscord.pyのAPIが持つコマンド拡張モジュールについて解説します。"

#: ../../ext/commands/api.rst:11
msgid "Bot"
msgstr "Bot"

#: discord.ext.commands.Bot:1 of
msgid "Represents a discord bot."
msgstr "Discord Botを表します。"

#: discord.ext.commands.Bot:3 of
msgid ""
"This class is a subclass of :class:`discord.Client` and as a result "
"anything that you can do with a :class:`discord.Client` you can do with "
"this bot."
msgstr ""
"このクラスは :class:`discord.Client` のサブクラスのため、 :class:`discord.Client` "
"でできることと同じことをこのBotで行うことができます。"

#: discord.ext.commands.Bot:10 of
msgid ""
"This class also subclasses :class:`.GroupMixin` to provide the "
"functionality to manage commands."
msgstr "また、 :class:`.GroupMixin` も継承しており、コマンド管理の機能も使用可能です。"

#: discord.ext.commands.Bot:15 of
msgid ""
"The command prefix is what the message content must contain initially to "
"have a command invoked. This prefix could either be a string to indicate "
"what the prefix should be, or a callable that takes in the bot as its "
"first parameter and :class:`discord.Message` as its second parameter and "
"returns the prefix. This is to facilitate \"dynamic\" command prefixes. "
"This callable can be either a regular function or a coroutine."
msgstr ""

#: discord.ext.commands.Bot:23 of
msgid ""
"An empty string as the prefix always matches, enabling prefix-less "
"command invocation. While this may be useful in DMs it should be avoided "
"in servers, as it's likely to cause performance issues and unintended "
"command invocations."
msgstr ""

#: discord.ext.commands.Bot:28 of
msgid ""
"The command prefix could also be an iterable of strings indicating that "
"multiple checks for the prefix should be used and the first one to match "
"will be the invocation prefix. You can get this prefix via "
":attr:`.Context.prefix`. To avoid confusion empty iterables are not "
"allowed."
msgstr ""

#: discord.ext.commands.Bot:36 of
msgid ""
"When passing multiple prefixes be careful to not pass a prefix that "
"matches a longer prefix occuring later in the sequence.  For example, if "
"the command prefix is ``('!', '!?')``  the ``'!?'`` prefix will never be "
"matched to any message as the previous one matches messages starting with"
" ``!?``. This is especially important when passing an empty string, it "
"should always be last as no prefix after it will be matched."
msgstr ""

#: discord.ext.commands.Bot:46 of
msgid ""
":class:`bool` -- Whether the commands should be case insensitive. "
"Defaults to ``False``. This attribute does not carry over to groups. You "
"must set it to every group if you require group commands to be case "
"insensitive as well."
msgstr ""

#: discord.ext.commands.Bot:52 of
msgid ":class:`str` -- The content prefixed into the default help message."
msgstr ""

#: discord.ext.commands.Bot:56 of
msgid ""
":class:`bool` -- If ``True``, the bot will only listen to commands "
"invoked by itself rather than ignoring itself. If ``False`` (the default)"
" then the bot will ignore itself. This cannot be changed once "
"initialised."
msgstr ""

#: discord.ext.commands.Bot:62 of
msgid ""
":class:`.HelpFormatter` -- The formatter used to format the help message."
" By default, it uses the :class:`.HelpFormatter`. Check it for more info "
"on how to override it. If you want to change the help command completely "
"(add aliases, etc) then a call to :meth:`~.Bot.remove_command` with "
"'help' as the argument would do the trick."
msgstr ""

#: discord.ext.commands.Bot:70 of
msgid ""
"Optional[:class:`bool`] -- A tribool that indicates if the help command "
"should PM the user instead of sending it to the channel it received it "
"from. If the boolean is set to ``True``, then all help output is PM'd. If"
" ``False``, none of the help output is PM'd. If ``None``, then the bot "
"will only PM when the help message becomes too long (dictated by more "
"than 1000 characters). Defaults to ``False``."
msgstr ""

#: discord.ext.commands.Bot:79 of
msgid ""
":class:`dict` -- A dictionary of options to pass in for the construction "
"of the help command. This allows you to change the command behaviour "
"without actually changing the implementation of the command. The "
"attributes will be the same as the ones passed in the :class:`.Command` "
"constructor. Note that ``pass_context`` will always be set to ``True`` "
"regardless of what you pass in."
msgstr ""

#: discord.ext.commands.Bot:87 of
msgid ""
":class:`str` -- The format string used when the help command is invoked "
"with a command that is not found. Useful for i18n. Defaults to ``\"No "
"command called {} found.\"``. The only format argument is the name of the"
" command passed."
msgstr ""

#: discord.ext.commands.Bot:93 of
msgid ""
":class:`str` -- The format string used when the help command is invoked "
"with requests for a subcommand but the command does not have any "
"subcommands. Defaults to ``\"Command {0.name} has no subcommands.\"``. "
"The first format argument is the :class:`.Command` attempted to get a "
"subcommand and the second is the name."
msgstr ""

#: discord.ext.commands.Bot:100 of
msgid ""
"Optional[:class:`int`] -- The ID that owns the bot. If this is not set "
"and is then queried via :meth:`.is_owner` then it is fetched "
"automatically using :meth:`~.Bot.application_info`."
msgstr ""

#: discord.ext.commands.Bot.activity:1 of
msgid ""
"Optional[Union[:class:`Activity`, :class:`Game`, :class:`Streaming`]] -- "
"The activity being used upon logging in."
msgstr ""

#: discord.ext.commands.Bot.add_check:1 of
msgid "Adds a global check to the bot."
msgstr ""

#: discord.ext.commands.Bot.add_check:3 of
msgid ""
"This is the non-decorator interface to :meth:`.check` and "
":meth:`.check_once`."
msgstr ""

#: ../../ext/commands/api.rst discord.ext.commands.Bot.add_check
#: discord.ext.commands.Bot.add_cog discord.ext.commands.Bot.add_command
#: discord.ext.commands.Bot.add_listener discord.ext.commands.Bot.after_invoke
#: discord.ext.commands.Bot.before_invoke
#: discord.ext.commands.Bot.change_presence discord.ext.commands.Bot.connect
#: discord.ext.commands.Bot.create_guild discord.ext.commands.Bot.delete_invite
#: discord.ext.commands.Bot.get_cog discord.ext.commands.Bot.get_cog_commands
#: discord.ext.commands.Bot.get_command discord.ext.commands.Bot.get_context
#: discord.ext.commands.Bot.get_invite discord.ext.commands.Bot.get_prefix
#: discord.ext.commands.Bot.get_user_info
#: discord.ext.commands.Bot.get_user_profile discord.ext.commands.Bot.invoke
#: discord.ext.commands.Bot.is_owner discord.ext.commands.Bot.load_extension
#: discord.ext.commands.Bot.login discord.ext.commands.Bot.process_commands
#: discord.ext.commands.Bot.remove_check discord.ext.commands.Bot.remove_cog
#: discord.ext.commands.Bot.remove_command
#: discord.ext.commands.Bot.remove_listener
#: discord.ext.commands.Bot.request_offline_members
#: discord.ext.commands.Bot.unload_extension discord.ext.commands.Bot.wait_for
#: discord.ext.commands.CategoryChannelConverter.convert
#: discord.ext.commands.ColourConverter.convert
#: discord.ext.commands.Command.after_invoke
#: discord.ext.commands.Command.before_invoke
#: discord.ext.commands.Command.can_run discord.ext.commands.Command.error
#: discord.ext.commands.Command.is_on_cooldown
#: discord.ext.commands.Command.reset_cooldown
#: discord.ext.commands.Context.get_message
#: discord.ext.commands.Context.history discord.ext.commands.Context.invoke
#: discord.ext.commands.Context.reinvoke discord.ext.commands.Context.send
#: discord.ext.commands.Converter.convert
#: discord.ext.commands.EmojiConverter.convert
#: discord.ext.commands.GameConverter.convert
#: discord.ext.commands.Group.add_command
#: discord.ext.commands.Group.after_invoke
#: discord.ext.commands.Group.before_invoke discord.ext.commands.Group.can_run
#: discord.ext.commands.Group.error discord.ext.commands.Group.get_command
#: discord.ext.commands.Group.is_on_cooldown
#: discord.ext.commands.Group.remove_command
#: discord.ext.commands.Group.reset_cooldown
#: discord.ext.commands.GroupMixin.add_command
#: discord.ext.commands.GroupMixin.get_command
#: discord.ext.commands.GroupMixin.remove_command
#: discord.ext.commands.HelpFormatter.format_help_for
#: discord.ext.commands.InviteConverter.convert
#: discord.ext.commands.MemberConverter.convert
#: discord.ext.commands.Paginator.add_line
#: discord.ext.commands.PartialEmojiConverter.convert
#: discord.ext.commands.RoleConverter.convert
#: discord.ext.commands.TextChannelConverter.convert
#: discord.ext.commands.UserConverter.convert
#: discord.ext.commands.VoiceChannelConverter.convert
#: discord.ext.commands.check discord.ext.commands.clean_content.convert
#: discord.ext.commands.command discord.ext.commands.cooldown
#: discord.ext.commands.has_any_role discord.ext.commands.has_permissions
#: discord.ext.commands.has_role of
msgid "Parameters"
msgstr "パラメータ"

#: discord.ext.commands.Bot.add_check:6 of
msgid "The function that was used as a global check."
msgstr ""

#: discord.ext.commands.Bot.add_check:7 of
msgid ""
"If the function should only be called once per :meth:`.Command.invoke` "
"call."
msgstr ""

#: discord.ext.commands.Bot.add_cog:1 of
msgid "Adds a \"cog\" to the bot."
msgstr "botに\"コグ\"を追加します。"

#: discord.ext.commands.Bot.add_cog:3 of
msgid "A cog is a class that has its own event listeners and commands."
msgstr ""

#: discord.ext.commands.Bot.add_cog:5 of
msgid ""
"They are meant as a way to organize multiple relevant commands into a "
"singular class that shares some state or no state at all."
msgstr ""

#: discord.ext.commands.Bot.add_cog:8 of
msgid ""
"The cog can also have a ``__global_check`` member function that allows "
"you to define a global check. See :meth:`.check` for more info. If the "
"name is ``__global_check_once`` then it's equivalent to the "
":meth:`.check_once` decorator."
msgstr ""

#: discord.ext.commands.Bot.add_cog:13 of
msgid "More information will be documented soon."
msgstr ""

#: discord.ext.commands.Bot.add_cog:15 of
msgid "The cog to register to the bot."
msgstr ""

#: discord.ext.commands.Bot.add_command:1
#: discord.ext.commands.Group.add_command:1
#: discord.ext.commands.GroupMixin.add_command:1 of
msgid ""
"Adds a :class:`.Command` or its superclasses into the internal list of "
"commands."
msgstr ""

#: discord.ext.commands.Bot.add_command:4
#: discord.ext.commands.Group.add_command:4
#: discord.ext.commands.GroupMixin.add_command:4 of
msgid ""
"This is usually not called, instead the :meth:`~.GroupMixin.command` or "
":meth:`~.GroupMixin.group` shortcut decorators are used instead."
msgstr ""

#: discord.ext.commands.Bot.add_command:7
#: discord.ext.commands.Group.add_command:7
#: discord.ext.commands.GroupMixin.add_command:7 of
msgid "The command to add."
msgstr ""

#: discord.ext.commands.Bot.add_command discord.ext.commands.Bot.after_invoke
#: discord.ext.commands.Bot.application_info
#: discord.ext.commands.Bot.before_invoke
#: discord.ext.commands.Bot.change_presence discord.ext.commands.Bot.connect
#: discord.ext.commands.Bot.create_guild discord.ext.commands.Bot.delete_invite
#: discord.ext.commands.Bot.get_invite discord.ext.commands.Bot.get_user_info
#: discord.ext.commands.Bot.get_user_profile
#: discord.ext.commands.Bot.get_webhook_info discord.ext.commands.Bot.listen
#: discord.ext.commands.Bot.load_extension discord.ext.commands.Bot.login
#: discord.ext.commands.Bot.request_offline_members
#: discord.ext.commands.Bot.wait_for discord.ext.commands.Command.after_invoke
#: discord.ext.commands.Command.before_invoke
#: discord.ext.commands.Command.can_run discord.ext.commands.Command.error
#: discord.ext.commands.Context.get_message
#: discord.ext.commands.Context.history discord.ext.commands.Context.pins
#: discord.ext.commands.Context.send discord.ext.commands.Group.add_command
#: discord.ext.commands.Group.after_invoke
#: discord.ext.commands.Group.before_invoke discord.ext.commands.Group.can_run
#: discord.ext.commands.Group.error discord.ext.commands.GroupMixin.add_command
#: discord.ext.commands.Paginator.add_line discord.ext.commands.command of
msgid "raises"
msgstr "例外"

#: discord.ext.commands.Bot.add_command:9
#: discord.ext.commands.Group.add_command:9
#: discord.ext.commands.GroupMixin.add_command:9 of
msgid ":exc:`.ClientException` -- If the command is already registered."
msgstr ""

#: discord.ext.commands.Bot.add_command:10
#: discord.ext.commands.Group.add_command:10
#: discord.ext.commands.GroupMixin.add_command:10 of
msgid ""
":exc:`TypeError` -- If the command passed is not a subclass of "
":class:`.Command`."
msgstr ""

#: discord.ext.commands.Bot.add_listener:1 of
msgid "The non decorator alternative to :meth:`.listen`."
msgstr ""

#: discord.ext.commands.Bot.add_listener:3 of
msgid "The extra event to listen to."
msgstr ""

#: discord.ext.commands.Bot.add_listener:5 of
msgid "The name of the command to use. Defaults to ``func.__name__``."
msgstr "使用するコマンドのデフォルトの名前は``func.__name__``です。"

#: discord.ext.commands.Bot.add_listener:9 discord.ext.commands.Bot.check:16
#: discord.ext.commands.Bot.check_once:20 discord.ext.commands.Bot.event:8
#: discord.ext.commands.Bot.listen:8 discord.ext.commands.has_any_role:10
#: discord.ext.commands.has_permissions:13
#: discord.ext.commands.when_mentioned_or:6 of
msgid "Example"
msgstr "例"

#: discord.ext.commands.Bot.after_invoke:1
#: discord.ext.commands.Command.after_invoke:1
#: discord.ext.commands.Group.after_invoke:1 of
msgid "A decorator that registers a coroutine as a post-invoke hook."
msgstr ""

#: discord.ext.commands.Bot.after_invoke:3
#: discord.ext.commands.Command.after_invoke:3
#: discord.ext.commands.Group.after_invoke:3 of
msgid ""
"A post-invoke hook is called directly after the command is called. This "
"makes it a useful function to clean-up database connections or any type "
"of clean up required."
msgstr ""

#: discord.ext.commands.Bot.after_invoke:7
#: discord.ext.commands.Command.after_invoke:7
#: discord.ext.commands.Group.after_invoke:7 of
msgid "This post-invoke hook takes a sole parameter, a :class:`.Context`."
msgstr ""

#: discord.ext.commands.Bot.after_invoke:11 of
msgid ""
"Similar to :meth:`~.Bot.before_invoke`\\, this is not called unless "
"checks and argument parsing procedures succeed. This hook is, however, "
"**always** called regardless of the internal command callback raising an "
"error (i.e. :exc:`.CommandInvokeError`\\). This makes it ideal for clean-"
"up scenarios."
msgstr ""

#: discord.ext.commands.Bot.after_invoke:17
#: discord.ext.commands.Command.after_invoke:11
#: discord.ext.commands.Group.after_invoke:11 of
msgid "The coroutine to register as the post-invoke hook."
msgstr ""

#: discord.ext.commands.Bot.after_invoke:19
#: discord.ext.commands.Bot.before_invoke:18
#: discord.ext.commands.Command.after_invoke:13
#: discord.ext.commands.Command.before_invoke:13
#: discord.ext.commands.Group.after_invoke:13
#: discord.ext.commands.Group.before_invoke:13 of
msgid ":exc:`.ClientException` -- The coroutine is not actually a coroutine."
msgstr ""

#: discord.ext.commands.Bot.application_info:1
#: discord.ext.commands.Bot.change_presence:1
#: discord.ext.commands.Bot.connect:1 discord.ext.commands.Bot.create_guild:1
#: discord.ext.commands.Bot.delete_invite:1
#: discord.ext.commands.Bot.get_context:1 discord.ext.commands.Bot.get_invite:1
#: discord.ext.commands.Bot.get_prefix:1
#: discord.ext.commands.Bot.get_user_info:1
#: discord.ext.commands.Bot.get_user_profile:1
#: discord.ext.commands.Bot.get_webhook_info:1
#: discord.ext.commands.Bot.invoke:1 discord.ext.commands.Bot.login:1
#: discord.ext.commands.Bot.logout:1
#: discord.ext.commands.Bot.on_command_error:1
#: discord.ext.commands.Bot.on_error:1
#: discord.ext.commands.Bot.process_commands:1
#: discord.ext.commands.Bot.request_offline_members:1
#: discord.ext.commands.Bot.start:1 discord.ext.commands.Bot.wait_for:1
#: discord.ext.commands.Bot.wait_until_ready:1
#: discord.ext.commands.CategoryChannelConverter.convert:1
#: discord.ext.commands.ColourConverter.convert:1
#: discord.ext.commands.Command.can_run:1
#: discord.ext.commands.Context.get_message:1
#: discord.ext.commands.Context.invoke:1 discord.ext.commands.Context.pins:1
#: discord.ext.commands.Context.reinvoke:1 discord.ext.commands.Context.send:1
#: discord.ext.commands.Context.trigger_typing:1
#: discord.ext.commands.Converter.convert:1
#: discord.ext.commands.EmojiConverter.convert:1
#: discord.ext.commands.GameConverter.convert:1
#: discord.ext.commands.Group.can_run:1
#: discord.ext.commands.InviteConverter.convert:1
#: discord.ext.commands.MemberConverter.convert:1
#: discord.ext.commands.PartialEmojiConverter.convert:1
#: discord.ext.commands.RoleConverter.convert:1
#: discord.ext.commands.TextChannelConverter.convert:1
#: discord.ext.commands.UserConverter.convert:1
#: discord.ext.commands.VoiceChannelConverter.convert:1
#: discord.ext.commands.clean_content.convert:1 of
msgid "|coro|"
msgstr "|coro|"

#: discord.ext.commands.Bot.application_info:3 of
msgid "Retrieve's the bot's application information."
msgstr ""

#: discord.ext.commands.Bot.application_info
#: discord.ext.commands.Bot.create_guild
#: discord.ext.commands.Bot.get_cog_commands
#: discord.ext.commands.Bot.get_command discord.ext.commands.Bot.get_context
#: discord.ext.commands.Bot.get_invite discord.ext.commands.Bot.get_prefix
#: discord.ext.commands.Bot.get_user_info
#: discord.ext.commands.Bot.get_user_profile
#: discord.ext.commands.Bot.get_webhook_info
#: discord.ext.commands.Bot.remove_command discord.ext.commands.Bot.wait_for
#: discord.ext.commands.Command.can_run
#: discord.ext.commands.Command.is_on_cooldown
#: discord.ext.commands.Context.get_message discord.ext.commands.Context.send
#: discord.ext.commands.Group.can_run discord.ext.commands.Group.get_command
#: discord.ext.commands.Group.is_on_cooldown
#: discord.ext.commands.Group.remove_command
#: discord.ext.commands.GroupMixin.get_command
#: discord.ext.commands.GroupMixin.remove_command
#: discord.ext.commands.HelpFormatter.filter_command_list
#: discord.ext.commands.HelpFormatter.format
#: discord.ext.commands.HelpFormatter.format_help_for of
msgid "Returns"
msgstr ""

#: discord.ext.commands.Bot.application_info:5 of
msgid "A namedtuple representing the application info."
msgstr ""

#: discord.ext.commands.Bot.application_info
#: discord.ext.commands.Bot.create_guild
#: discord.ext.commands.Bot.get_cog_commands
#: discord.ext.commands.Bot.get_command discord.ext.commands.Bot.get_context
#: discord.ext.commands.Bot.get_invite discord.ext.commands.Bot.get_prefix
#: discord.ext.commands.Bot.get_user_info
#: discord.ext.commands.Bot.get_user_profile
#: discord.ext.commands.Bot.get_webhook_info
#: discord.ext.commands.Bot.remove_command discord.ext.commands.Bot.wait_for
#: discord.ext.commands.Command.can_run
#: discord.ext.commands.Command.is_on_cooldown
#: discord.ext.commands.Context.get_message discord.ext.commands.Context.send
#: discord.ext.commands.Group.can_run discord.ext.commands.Group.get_command
#: discord.ext.commands.Group.is_on_cooldown
#: discord.ext.commands.Group.remove_command
#: discord.ext.commands.GroupMixin.get_command
#: discord.ext.commands.GroupMixin.remove_command
#: discord.ext.commands.HelpFormatter.filter_command_list
#: discord.ext.commands.HelpFormatter.format
#: discord.ext.commands.HelpFormatter.format_help_for of
msgid "Return type"
msgstr ""

#: discord.ext.commands.Bot.application_info:6 of
msgid ":class:`AppInfo`"
msgstr ":class:`AppInfo`"

#: discord.ext.commands.Bot.application_info:8 of
msgid ":exc:`HTTPException` -- Retrieving the information failed somehow."
msgstr ""

#: discord.ext.commands.Bot.before_invoke:1
#: discord.ext.commands.Command.before_invoke:1
#: discord.ext.commands.Group.before_invoke:1 of
msgid "A decorator that registers a coroutine as a pre-invoke hook."
msgstr ""

#: discord.ext.commands.Bot.before_invoke:3
#: discord.ext.commands.Command.before_invoke:3
#: discord.ext.commands.Group.before_invoke:3 of
msgid ""
"A pre-invoke hook is called directly before the command is called. This "
"makes it a useful function to set up database connections or any type of "
"set up required."
msgstr ""

#: discord.ext.commands.Bot.before_invoke:7
#: discord.ext.commands.Command.before_invoke:7
#: discord.ext.commands.Group.before_invoke:7 of
msgid "This pre-invoke hook takes a sole parameter, a :class:`.Context`."
msgstr ""

#: discord.ext.commands.Bot.before_invoke:11 of
msgid ""
"The :meth:`~.Bot.before_invoke` and :meth:`~.Bot.after_invoke` hooks are "
"only called if all checks and argument parsing procedures pass without "
"error. If any check or argument parsing procedures fail then the hooks "
"are not called."
msgstr ""

#: discord.ext.commands.Bot.before_invoke:16
#: discord.ext.commands.Command.before_invoke:11
#: discord.ext.commands.Group.before_invoke:11 of
msgid "The coroutine to register as the pre-invoke hook."
msgstr ""

#: discord.ext.commands.Bot.change_presence:3 of
msgid "Changes the client's presence."
msgstr ""

#: discord.ext.commands.Bot.change_presence:5 of
msgid ""
"The activity parameter is a :class:`Activity` object (not a string) that "
"represents the activity being done currently. This could also be the "
"slimmed down versions, :class:`Game` and :class:`Streaming`."
msgstr ""

#: discord.ext.commands.Bot.change_presence:9 of
msgid "Example: ::"
msgstr ""

#: discord.ext.commands.Bot.change_presence:14 of
msgid "The activity being done. ``None`` if no currently active activity is done."
msgstr ""

#: discord.ext.commands.Bot.change_presence:16 of
msgid ""
"Indicates what status to change to. If None, then :attr:`Status.online` "
"is used."
msgstr ""

#: discord.ext.commands.Bot.change_presence:19 of
msgid ""
"Indicates if you are going AFK. This allows the discord client to know "
"how to handle push notifications better for you in case you are actually "
"idle and not lying."
msgstr ""

#: discord.ext.commands.Bot.change_presence:24 of
msgid ""
":exc:`InvalidArgument` -- If the ``activity`` parameter is not the proper"
" type."
msgstr ""

#: discord.ext.commands.Bot.check:1 of
msgid "A decorator that adds a global check to the bot."
msgstr ""

#: discord.ext.commands.Bot.check:3 of
msgid ""
"A global check is similar to a :func:`.check` that is applied on a per "
"command basis except it is run before any command checks have been "
"verified and applies to every command the bot has."
msgstr ""

#: discord.ext.commands.Bot.check:9 discord.ext.commands.Bot.check_once:13 of
msgid "This function can either be a regular function or a coroutine."
msgstr ""

#: discord.ext.commands.Bot.check:11 discord.ext.commands.Bot.check_once:15 of
msgid ""
"Similar to a command :func:`.check`\\, this takes a single parameter of "
"type :class:`.Context` and can only raise exceptions derived from "
":exc:`.CommandError`."
msgstr ""

#: discord.ext.commands.Bot.check_once:1 of
msgid "A decorator that adds a \"call once\" global check to the bot."
msgstr ""

#: discord.ext.commands.Bot.check_once:3 of
msgid ""
"Unlike regular global checks, this one is called only once per "
":meth:`.Command.invoke` call."
msgstr ""

#: discord.ext.commands.Bot.check_once:6 of
msgid ""
"Regular global checks are called whenever a command is called or "
":meth:`.Command.can_run` is called. This type of check bypasses that and "
"ensures that it's called only once, even inside the default help command."
msgstr ""

#: discord.ext.commands.Bot.clear:1 of
msgid "Clears the internal state of the bot."
msgstr ""

#: discord.ext.commands.Bot.clear:3 of
msgid ""
"After this, the bot can be considered \"re-opened\", i.e. "
":meth:`.is_closed` and :meth:`.is_ready` both return ``False`` along with"
" the bot's internal cache cleared."
msgstr ""

#: discord.ext.commands.Bot.command:1 discord.ext.commands.Group.command:1
#: discord.ext.commands.GroupMixin.command:1 of
msgid ""
"A shortcut decorator that invokes :func:`.command` and adds it to the "
"internal command list via :meth:`~.GroupMixin.add_command`."
msgstr ""

#: discord.ext.commands.Bot.commands:1 discord.ext.commands.Group.commands:1
#: discord.ext.commands.GroupMixin.commands:1 of
msgid ""
"Set[:class:`.Command`] -- A unique set of commands without aliases that "
"are registered."
msgstr ""

#: discord.ext.commands.Bot.connect:3 of
msgid ""
"Creates a websocket connection and lets the websocket listen to messages "
"from discord. This is a loop that runs the entire event system and "
"miscellaneous aspects of the library. Control is not resumed until the "
"WebSocket connection is terminated."
msgstr ""

#: discord.ext.commands.Bot.connect:8 of
msgid ""
"If we should attempt reconnecting, either due to internet failure or a "
"specific failure on Discord's part. Certain disconnects that lead to bad "
"state will not be handled (such as invalid sharding payloads or bad "
"tokens)."
msgstr ""

#: discord.ext.commands.Bot.connect:14 of
msgid ""
":exc:`GatewayNotFound` -- If the gateway to connect to discord is not "
"found. Usually if this is thrown then there is a discord API outage."
msgstr ""

#: discord.ext.commands.Bot.connect:16 of
msgid ":exc:`ConnectionClosed` -- The websocket connection has been terminated."
msgstr ""

#: discord.ext.commands.Bot.create_guild:3 of
msgid "Creates a :class:`Guild`."
msgstr ""

#: discord.ext.commands.Bot.create_guild:5 of
msgid "Bot accounts in more than 10 guilds are not allowed to create guilds."
msgstr ""

#: discord.ext.commands.Bot.create_guild:7 of
msgid "The name of the guild."
msgstr ""

#: discord.ext.commands.Bot.create_guild:9 of
msgid ""
"The region for the voice communication server. Defaults to "
":attr:`VoiceRegion.us_west`."
msgstr ""

#: discord.ext.commands.Bot.create_guild:12 of
msgid ""
"The :term:`py:bytes-like object` representing the icon. See "
":meth:`~ClientUser.edit` for more details on what is expected."
msgstr ""

#: discord.ext.commands.Bot.create_guild:16 of
msgid ":exc:`HTTPException` -- Guild creation failed."
msgstr ""

#: discord.ext.commands.Bot.create_guild:17 of
msgid ""
":exc:`InvalidArgument` -- Invalid icon image format given. Must be PNG or"
" JPG."
msgstr ""

#: discord.ext.commands.Bot.create_guild:19 of
msgid "The guild created. This is not the same guild that is added to cache."
msgstr ""

#: discord.ext.commands.Bot.create_guild:21 of
msgid ":class:`Guild`"
msgstr ":class:`Guild`"

#: discord.ext.commands.Bot.delete_invite:3 of
msgid "Revokes an :class:`Invite`, URL, or ID to an invite."
msgstr ""

#: discord.ext.commands.Bot.delete_invite:5 of
msgid ""
"You must have the :attr:`~Permissions.manage_channels` permission in the "
"associated guild to do this."
msgstr ""

#: discord.ext.commands.Bot.delete_invite:8 of
msgid "The invite to revoke."
msgstr ""

#: discord.ext.commands.Bot.delete_invite:10 of
msgid ":exc:`Forbidden` -- You do not have permissions to revoke invites."
msgstr ""

#: discord.ext.commands.Bot.delete_invite:11 of
msgid ":exc:`NotFound` -- The invite is invalid or expired."
msgstr ""

#: discord.ext.commands.Bot.delete_invite:12 of
msgid ":exc:`HTTPException` -- Revoking the invite failed."
msgstr ""

#: discord.ext.commands.Bot.emojis:1 of
msgid "List[:class:`Emoji`] -- The emojis that the connected client has."
msgstr ""

#: discord.ext.commands.Bot.event:1 of
msgid "A decorator that registers an event to listen to."
msgstr ""

#: discord.ext.commands.Bot.event:3 of
msgid ""
"You can find more info about the events on the :ref:`documentation below "
"<discord-api-events>`."
msgstr ""

#: discord.ext.commands.Bot.event:5 of
msgid "The events must be a |corourl|_, if not, :exc:`ClientException` is raised."
msgstr ""

#: discord.ext.commands.Bot.get_all_channels:1 of
msgid ""
"A generator that retrieves every :class:`abc.GuildChannel` the client can"
" 'access'."
msgstr ""

#: discord.ext.commands.Bot.get_all_channels:3
#: discord.ext.commands.Bot.get_all_members:3 of
msgid "This is equivalent to: ::"
msgstr ""

#: discord.ext.commands.Bot.get_all_channels:11 of
msgid ""
"Just because you receive a :class:`abc.GuildChannel` does not mean that "
"you can communicate in said channel. "
":meth:`abc.GuildChannel.permissions_for` should be used for that."
msgstr ""

#: discord.ext.commands.Bot.get_all_members:1 of
msgid "Returns a generator with every :class:`Member` the client can see."
msgstr ""

#: discord.ext.commands.Bot.get_channel:1 of
msgid ""
"Returns a :class:`abc.GuildChannel` or :class:`abc.PrivateChannel` with "
"the following ID."
msgstr ""

#: discord.ext.commands.Bot.get_channel:3 of
msgid "If not found, returns None."
msgstr ""

#: discord.ext.commands.Bot.get_cog:1 of
msgid "Gets the cog instance requested."
msgstr ""

#: discord.ext.commands.Bot.get_cog:3 of
msgid "If the cog is not found, ``None`` is returned instead."
msgstr ""

#: discord.ext.commands.Bot.get_cog:5 of
msgid "The name of the cog you are requesting."
msgstr ""

#: discord.ext.commands.Bot.get_cog_commands:1 of
msgid "Gets a unique set of the cog's registered commands without aliases."
msgstr ""

#: discord.ext.commands.Bot.get_cog_commands:4 of
msgid "If the cog is not found, an empty set is returned."
msgstr ""

#: discord.ext.commands.Bot.get_cog_commands:6 of
msgid "The name of the cog whose commands you are requesting."
msgstr ""

#: discord.ext.commands.Bot.get_cog_commands:9 of
msgid "A unique set of commands without aliases that belong to the cog."
msgstr ""

#: discord.ext.commands.Bot.get_cog_commands:11 of
msgid "Set[:class:`.Command`]"
msgstr ""

#: discord.ext.commands.Bot.get_command:1
#: discord.ext.commands.Group.get_command:1
#: discord.ext.commands.GroupMixin.get_command:1 of
msgid "Get a :class:`.Command` or subclasses from the internal list of commands."
msgstr ""

#: discord.ext.commands.Bot.get_command:4
#: discord.ext.commands.Group.get_command:4
#: discord.ext.commands.GroupMixin.get_command:4 of
msgid "This could also be used as a way to get aliases."
msgstr ""

#: discord.ext.commands.Bot.get_command:6
#: discord.ext.commands.Group.get_command:6
#: discord.ext.commands.GroupMixin.get_command:6 of
msgid ""
"The name could be fully qualified (e.g. ``'foo bar'``) will get the "
"subcommand ``bar`` of the group command ``foo``. If a subcommand is not "
"found then ``None`` is returned just as usual."
msgstr ""

#: discord.ext.commands.Bot.get_command:10
#: discord.ext.commands.Group.get_command:10
#: discord.ext.commands.GroupMixin.get_command:10 of
msgid "The name of the command to get."
msgstr ""

#: discord.ext.commands.Bot.get_command:13
#: discord.ext.commands.Group.get_command:13
#: discord.ext.commands.GroupMixin.get_command:13 of
msgid "The command that was requested. If not found, returns ``None``."
msgstr ""

#: discord.ext.commands.Bot.get_context:3 of
msgid "Returns the invocation context from the message."
msgstr ""

#: discord.ext.commands.Bot.get_context:5 of
msgid ""
"This is a more low-level counter-part for :meth:`.process_commands` to "
"allow users more fine grained control over the processing."
msgstr ""

#: discord.ext.commands.Bot.get_context:8 of
msgid ""
"The returned context is not guaranteed to be a valid invocation context, "
":attr:`.Context.valid` must be checked to make sure it is. If the context"
" is not valid then it is not a valid candidate to be invoked under "
":meth:`~.Bot.invoke`."
msgstr ""

#: discord.ext.commands.Bot.get_context:13 of
msgid "The message to get the invocation context from."
msgstr ""

#: discord.ext.commands.Bot.get_context:15 of
msgid ""
"The factory class that will be used to create the context. By default, "
"this is :class:`.Context`. Should a custom class be provided, it must be "
"similar enough to :class:`.Context`\\'s interface."
msgstr ""

#: discord.ext.commands.Bot.get_context:20 of
msgid ""
"The invocation context. The type of this can change via the ``cls`` "
"parameter."
msgstr ""

#: discord.ext.commands.Bot.get_context:22 of
msgid ":class:`.Context`"
msgstr ":class:`.Context`"

#: discord.ext.commands.Bot.get_emoji:1 of
msgid "Returns a :class:`Emoji` with the given ID. If not found, returns None."
msgstr ""

#: discord.ext.commands.Bot.get_guild:1 of
msgid "Returns a :class:`Guild` with the given ID. If not found, returns None."
msgstr ""

#: discord.ext.commands.Bot.get_invite:3 of
msgid "Gets an :class:`Invite` from a discord.gg URL or ID."
msgstr ""

#: discord.ext.commands.Bot.get_invite:7 of
msgid ""
"If the invite is for a guild you have not joined, the guild and channel "
"attributes of the returned invite will be :class:`Object` with the names "
"patched in."
msgstr ""

#: discord.ext.commands.Bot.get_invite:11 of
msgid "The discord invite ID or URL (must be a discord.gg URL)."
msgstr ""

#: discord.ext.commands.Bot.get_invite:14 of
msgid ":exc:`NotFound` -- The invite has expired or is invalid."
msgstr ""

#: discord.ext.commands.Bot.get_invite:15 of
msgid ":exc:`HTTPException` -- Getting the invite failed."
msgstr ""

#: discord.ext.commands.Bot.get_invite:17 of
msgid "The invite from the URL/ID."
msgstr ""

#: discord.ext.commands.Bot.get_invite:18 of
msgid ":class:`Invite`"
msgstr ":class:`Invite`"

#: discord.ext.commands.Bot.get_prefix:3 of
msgid ""
"Retrieves the prefix the bot is listening to with the message as a "
"context."
msgstr ""

#: discord.ext.commands.Bot.get_prefix:6 of
msgid "The message context to get the prefix of."
msgstr ""

#: discord.ext.commands.Bot.get_prefix:9 of
msgid "A list of prefixes or a single prefix that the bot is listening for."
msgstr ""

#: discord.ext.commands.Bot.get_user:1 of
msgid "Returns a :class:`User` with the given ID. If not found, returns None."
msgstr ""

#: discord.ext.commands.Bot.get_user_info:3 of
msgid ""
"Retrieves a :class:`User` based on their ID. This can only be used by bot"
" accounts. You do not have to share any guilds with the user to get this "
"information, however many operations do require that you do."
msgstr ""

#: discord.ext.commands.Bot.get_user_info:8 of
msgid "The user's ID to fetch from."
msgstr ""

#: discord.ext.commands.Bot.get_user_info:11 of
msgid "The user you requested."
msgstr ""

#: discord.ext.commands.Bot.get_user_info:12 of
msgid ":class:`User`"
msgstr ":class:`User`"

#: discord.ext.commands.Bot.get_user_info:14 of
msgid ":exc:`NotFound` -- A user with this ID does not exist."
msgstr ""

#: discord.ext.commands.Bot.get_user_info:15 of
msgid ":exc:`HTTPException` -- Fetching the user failed."
msgstr ""

#: discord.ext.commands.Bot.get_user_profile:3 of
msgid ""
"Gets an arbitrary user's profile. This can only be used by non-bot "
"accounts."
msgstr ""

#: discord.ext.commands.Bot.get_user_profile:5 of
msgid "The ID of the user to fetch their profile for."
msgstr ""

#: discord.ext.commands.Bot.get_user_profile:8 of
msgid ":exc:`Forbidden` -- Not allowed to fetch profiles."
msgstr ""

#: discord.ext.commands.Bot.get_user_profile:9 of
msgid ":exc:`HTTPException` -- Fetching the profile failed."
msgstr ""

#: discord.ext.commands.Bot.get_user_profile:11 of
msgid "The profile of the user."
msgstr ""

#: discord.ext.commands.Bot.get_user_profile:12 of
msgid ":class:`Profile`"
msgstr ":class:`Profile`"

#: discord.ext.commands.Bot.get_webhook_info:3 of
msgid "Retrieves a :class:`Webhook` with the specified ID."
msgstr ""

#: discord.ext.commands.Bot.get_webhook_info:5 of
msgid ":exc:`HTTPException` -- Retrieving the webhook failed."
msgstr ""

#: discord.ext.commands.Bot.get_webhook_info:6 of
msgid ":exc:`NotFound` -- Invalid webhook ID."
msgstr ""

#: discord.ext.commands.Bot.get_webhook_info:7 of
msgid ":exc:`Forbidden` -- You do not have permission to fetch this webhook."
msgstr ""

#: discord.ext.commands.Bot.get_webhook_info:9 of
msgid "The webhook you requested."
msgstr ""

#: discord.ext.commands.Bot.get_webhook_info:10 of
msgid ":class:`Webhook`"
msgstr ":class:`Webhook`"

#: discord.ext.commands.Bot.group:1 discord.ext.commands.Group.group:1
#: discord.ext.commands.GroupMixin.group:1 of
msgid ""
"A shortcut decorator that invokes :func:`.group` and adds it to the "
"internal command list via :meth:`~.GroupMixin.add_command`."
msgstr ""

#: discord.ext.commands.Bot.guilds:1 of
msgid ""
"List[:class:`Guild`] -- The guilds that the connected client is a member "
"of."
msgstr ""

#: discord.ext.commands.Bot.invoke:3 of
msgid ""
"Invokes the command given under the invocation context and handles all "
"the internal event dispatch mechanisms."
msgstr ""

#: discord.ext.commands.Bot.invoke:6 of
msgid "The invocation context to invoke."
msgstr ""

#: discord.ext.commands.Bot.is_closed:1 of
msgid ":obj:`bool`: Indicates if the websocket connection is closed."
msgstr ""

#: discord.ext.commands.Bot.is_owner:1 of
msgid "Checks if a :class:`.User` or :class:`.Member` is the owner of this bot."
msgstr ""

#: discord.ext.commands.Bot.is_owner:4 of
msgid ""
"If an :attr:`owner_id` is not set, it is fetched automatically through "
"the use of :meth:`~.Bot.application_info`."
msgstr ""

#: discord.ext.commands.Bot.is_owner:7 of
msgid "The user to check for."
msgstr ""

#: discord.ext.commands.Bot.is_ready:1 of
msgid ":obj:`bool`: Specifies if the client's internal cache is ready for use."
msgstr ""

#: discord.ext.commands.Bot.latency:1 of
msgid ""
":obj:`float` -- Measures latency between a HEARTBEAT and a HEARTBEAT_ACK "
"in seconds."
msgstr ""

#: discord.ext.commands.Bot.latency:3 of
msgid "This could be referred to as the Discord WebSocket protocol latency."
msgstr ""

#: discord.ext.commands.Bot.listen:1 of
msgid ""
"A decorator that registers another function as an external event "
"listener. Basically this allows you to listen to multiple events from "
"different places e.g. such as :func:`.on_ready`"
msgstr ""

#: discord.ext.commands.Bot.listen:5 of
msgid "The functions being listened to must be a coroutine."
msgstr ""

#: discord.ext.commands.Bot.listen:21 of
msgid "Would print one and two in an unspecified order."
msgstr ""

#: discord.ext.commands.Bot.listen:23 of
msgid ""
":exc:`.ClientException` -- The function being listened to is not a "
"coroutine."
msgstr ""

#: discord.ext.commands.Bot.load_extension:1 of
msgid "Loads an extension."
msgstr ""

#: discord.ext.commands.Bot.load_extension:3 of
msgid ""
"An extension is a python module that contains commands, cogs, or "
"listeners."
msgstr ""

#: discord.ext.commands.Bot.load_extension:6 of
msgid ""
"An extension must have a global function, ``setup`` defined as the entry "
"point on what to do when the extension is loaded. This entry point must "
"have a single argument, the ``bot``."
msgstr ""

#: discord.ext.commands.Bot.load_extension:10 of
msgid ""
"The extension name to load. It must be dot separated like regular Python "
"imports if accessing a sub-module. e.g. ``foo.test`` if you want to "
"import ``foo/test.py``."
msgstr ""

#: discord.ext.commands.Bot.load_extension:15 of
msgid ":exc:`ClientException` -- The extension does not have a setup function."
msgstr ""

#: discord.ext.commands.Bot.load_extension:16 of
msgid ":exc:`ImportError` -- The extension could not be imported."
msgstr ""

#: discord.ext.commands.Bot.login:3 of
msgid "Logs in the client with the specified credentials."
msgstr ""

#: discord.ext.commands.Bot.login:5 of
msgid "This function can be used in two different ways."
msgstr ""

#: discord.ext.commands.Bot.login:9 of
msgid ""
"Logging on with a user token is against the Discord `Terms of Service "
"<https://support.discordapp.com/hc/en-us/articles/115002192352>`_ and "
"doing so might potentially get your account banned. Use this at your own "
"risk."
msgstr ""

#: discord.ext.commands.Bot.login:14 of
msgid ""
"The authentication token. Do not prefix this token with anything as the "
"library will do it for you."
msgstr ""

#: discord.ext.commands.Bot.login:17 of
msgid ""
"Keyword argument that specifies if the account logging on is a bot token "
"or not."
msgstr ""

#: discord.ext.commands.Bot.login:21 of
msgid ":exc:`LoginFailure` -- The wrong credentials are passed."
msgstr ""

#: discord.ext.commands.Bot.login:22 of
msgid ""
":exc:`HTTPException` -- An unknown HTTP related error occurred, usually "
"when it isn't 200 or the known incorrect credentials passing status code."
msgstr ""

#: discord.ext.commands.Bot.logout:3 of
msgid "Logs out of Discord and closes all connections."
msgstr ""

#: discord.ext.commands.Bot.on_command_error:3 of
msgid "The default command error handler provided by the bot."
msgstr ""

#: discord.ext.commands.Bot.on_command_error:5 of
msgid ""
"By default this prints to ``sys.stderr`` however it could be overridden "
"to have a different implementation."
msgstr ""

#: discord.ext.commands.Bot.on_command_error:8 of
msgid "This only fires if you do not specify any listeners for command error."
msgstr ""

#: discord.ext.commands.Bot.on_error:3 of
msgid "The default error handler provided by the client."
msgstr ""

#: discord.ext.commands.Bot.on_error:5 of
msgid ""
"By default this prints to ``sys.stderr`` however it could be overridden "
"to have a different implementation. Check :func:`discord.on_error` for "
"more details."
msgstr ""

#: discord.ext.commands.Bot.private_channels:1 of
msgid ""
"List[:class:`abc.PrivateChannel`] -- The private channels that the "
"connected client is participating on."
msgstr ""

#: discord.ext.commands.Bot.private_channels:5 of
msgid ""
"This returns only up to 128 most recent private channels due to an "
"internal working on how Discord deals with private channels."
msgstr ""

#: discord.ext.commands.Bot.process_commands:3 of
msgid ""
"This function processes the commands that have been registered to the bot"
" and other groups. Without this coroutine, none of the commands will be "
"triggered."
msgstr ""

#: discord.ext.commands.Bot.process_commands:7 of
msgid ""
"By default, this coroutine is called inside the :func:`.on_message` "
"event. If you choose to override the :func:`.on_message` event, then you "
"should invoke this coroutine as well."
msgstr ""

#: discord.ext.commands.Bot.process_commands:11 of
msgid ""
"This is built using other low level tools, and is equivalent to a call to"
" :meth:`~.Bot.get_context` followed by a call to :meth:`~.Bot.invoke`."
msgstr ""

#: discord.ext.commands.Bot.process_commands:14 of
msgid ""
"This also checks if the message's author is a bot and doesn't call "
":meth:`~.Bot.get_context` or :meth:`~.Bot.invoke` if so."
msgstr ""

#: discord.ext.commands.Bot.process_commands:17 of
msgid "The message to process commands for."
msgstr ""

#: discord.ext.commands.Bot.remove_check:1 of
msgid "Removes a global check from the bot."
msgstr ""

#: discord.ext.commands.Bot.remove_check:3 of
msgid ""
"This function is idempotent and will not raise an exception if the "
"function is not in the global checks."
msgstr ""

#: discord.ext.commands.Bot.remove_check:6 of
msgid "The function to remove from the global checks."
msgstr ""

#: discord.ext.commands.Bot.remove_cog:1 of
msgid "Removes a cog from the bot."
msgstr ""

#: discord.ext.commands.Bot.remove_cog:3 of
msgid ""
"All registered commands and event listeners that the cog has registered "
"will be removed as well."
msgstr ""

#: discord.ext.commands.Bot.remove_cog:6 of
msgid "If no cog is found then this method has no effect."
msgstr ""

#: discord.ext.commands.Bot.remove_cog:8 of
msgid ""
"If the cog defines a special member function named ``__unload`` then it "
"is called when removal has completed. This function **cannot** be a "
"coroutine. It must be a regular function."
msgstr ""

#: discord.ext.commands.Bot.remove_cog:12 of
msgid "The name of the cog to remove."
msgstr ""

#: discord.ext.commands.Bot.remove_command:1
#: discord.ext.commands.Group.remove_command:1
#: discord.ext.commands.GroupMixin.remove_command:1 of
msgid ""
"Remove a :class:`.Command` or subclasses from the internal list of "
"commands."
msgstr ""

#: discord.ext.commands.Bot.remove_command:4
#: discord.ext.commands.Group.remove_command:4
#: discord.ext.commands.GroupMixin.remove_command:4 of
msgid "This could also be used as a way to remove aliases."
msgstr ""

#: discord.ext.commands.Bot.remove_command:6
#: discord.ext.commands.Group.remove_command:6
#: discord.ext.commands.GroupMixin.remove_command:6 of
msgid "The name of the command to remove."
msgstr ""

#: discord.ext.commands.Bot.remove_command:9
#: discord.ext.commands.Group.remove_command:9
#: discord.ext.commands.GroupMixin.remove_command:9 of
msgid ""
"The command that was removed. If the name is not valid then `None` is "
"returned instead."
msgstr ""

#: discord.ext.commands.Bot.remove_command:11
#: discord.ext.commands.Group.remove_command:11
#: discord.ext.commands.GroupMixin.remove_command:11 of
msgid ":class:`.Command` or subclass"
msgstr ""

#: discord.ext.commands.Bot.remove_listener:1 of
msgid "Removes a listener from the pool of listeners."
msgstr ""

#: discord.ext.commands.Bot.remove_listener:3 of
msgid "The function that was used as a listener to remove."
msgstr ""

#: discord.ext.commands.Bot.remove_listener:4 of
msgid "The name of the event we want to remove. Defaults to ``func.__name__``."
msgstr ""

#: discord.ext.commands.Bot.request_offline_members:3 of
msgid ""
"Requests previously offline members from the guild to be filled up into "
"the :attr:`Guild.members` cache. This function is usually not called. It "
"should only be used if you have the ``fetch_offline_members`` parameter "
"set to ``False``."
msgstr ""

#: discord.ext.commands.Bot.request_offline_members:8 of
msgid ""
"When the client logs on and connects to the websocket, Discord does not "
"provide the library with offline members if the number of members in the "
"guild is larger than 250. You can check if a guild is large if "
":attr:`Guild.large` is ``True``."
msgstr ""

#: discord.ext.commands.Bot.request_offline_members:13 of
msgid "An argument list of guilds to request offline members for."
msgstr ""

#: discord.ext.commands.Bot.request_offline_members:15 of
msgid ""
":exc:`InvalidArgument` -- If any guild is unavailable or not large in the"
" collection."
msgstr ""

#: discord.ext.commands.Bot.run:1 of
msgid ""
"A blocking call that abstracts away the `event loop`_ initialisation from"
" you."
msgstr ""

#: discord.ext.commands.Bot.run:4 of
msgid ""
"If you want more control over the event loop then this function should "
"not be used. Use :meth:`start` coroutine or :meth:`connect` + "
":meth:`login`."
msgstr ""

#: discord.ext.commands.Bot.run:8 of
msgid "Roughly Equivalent to: ::"
msgstr ""

#: discord.ext.commands.Bot.run:20 of
msgid ""
"This function must be the last function to call due to the fact that it "
"is blocking. That means that registration of events or anything being "
"called after this function call will not execute until it returns."
msgstr ""

#: discord.ext.commands.Bot.start:3 of
msgid "A shorthand coroutine for :meth:`login` + :meth:`connect`."
msgstr ""

#: discord.ext.commands.Bot.unload_extension:1 of
msgid "Unloads an extension."
msgstr ""

#: discord.ext.commands.Bot.unload_extension:3 of
msgid ""
"When the extension is unloaded, all commands, listeners, and cogs are "
"removed from the bot and the module is un-imported."
msgstr ""

#: discord.ext.commands.Bot.unload_extension:6 of
msgid ""
"The extension can provide an optional global function, ``teardown``, to "
"do miscellaneous clean-up if necessary. This function takes a single "
"parameter, the ``bot``, similar to ``setup`` from "
":func:`~.Bot.load_extension`."
msgstr ""

#: discord.ext.commands.Bot.unload_extension:11 of
msgid ""
"The extension name to unload. It must be dot separated like regular "
"Python imports if accessing a sub-module. e.g. ``foo.test`` if you want "
"to import ``foo/test.py``."
msgstr ""

#: discord.ext.commands.Bot.user:1 of
msgid ""
"Optional[:class:`ClientUser`] -- Represents the connected client. None if"
" not logged in."
msgstr ""

#: discord.ext.commands.Bot.users:1 of
msgid "Returns a :obj:`list` of all the :class:`User` the bot can see."
msgstr ""

#: discord.ext.commands.Bot.voice_clients:1 of
msgid "List[:class:`VoiceClient`] -- Represents a list of voice connections."
msgstr ""

#: discord.ext.commands.Bot.wait_for:3 of
msgid "Waits for a WebSocket event to be dispatched."
msgstr ""

#: discord.ext.commands.Bot.wait_for:5 of
msgid ""
"This could be used to wait for a user to reply to a message, or to react "
"to a message, or to edit a message in a self-contained way."
msgstr ""

#: discord.ext.commands.Bot.wait_for:9 of
msgid ""
"The ``timeout`` parameter is passed onto :func:`asyncio.wait_for`. By "
"default, it does not timeout. Note that this does propagate the "
":exc:`asyncio.TimeoutError` for you in case of timeout and is provided "
"for ease of use."
msgstr ""

#: discord.ext.commands.Bot.wait_for:14 of
msgid ""
"In case the event returns multiple arguments, a :obj:`tuple` containing "
"those arguments is returned instead. Please check the :ref:`documentation"
" <discord-api-events>` for a list of events and their parameters."
msgstr ""

#: discord.ext.commands.Bot.wait_for:19 of
msgid "This function returns the **first event that meets the requirements**."
msgstr ""

#: discord.ext.commands.Bot.wait_for:22 discord.ext.commands.Context.history:34
#: discord.ext.commands.check:21 of
msgid "Examples"
msgstr ""

#: discord.ext.commands.Bot.wait_for:23 of
msgid "Waiting for a user reply: ::"
msgstr ""

#: discord.ext.commands.Bot.wait_for:37 of
msgid "Waiting for a thumbs up reaction from the message author: ::"
msgstr ""

#: discord.ext.commands.Bot.wait_for:55 of
msgid ""
"The event name, similar to the :ref:`event reference <discord-api-"
"events>`, but without the ``on_`` prefix, to wait for."
msgstr ""

#: discord.ext.commands.Bot.wait_for:58 of
msgid ""
"A predicate to check what to wait for. The arguments must meet the "
"parameters of the event being waited for."
msgstr ""

#: discord.ext.commands.Bot.wait_for:61 of
msgid ""
"The number of seconds to wait before timing out and raising "
":exc:`asyncio.TimeoutError`."
msgstr ""

#: discord.ext.commands.Bot.wait_for:65 of
msgid ""
":exc:`asyncio.TimeoutError` -- If a timeout is provided and it was "
"reached."
msgstr ""

#: discord.ext.commands.Bot.wait_for:67 of
msgid ""
"Returns no arguments, a single argument, or a :obj:`tuple` of multiple "
"arguments that mirrors the parameters passed in the :ref:`event reference"
" <discord-api-events>`."
msgstr ""

#: discord.ext.commands.Bot.wait_until_ready:3 of
msgid "Waits until the client's internal cache is all ready."
msgstr ""

#: discord.ext.commands.Bot.walk_commands:1
#: discord.ext.commands.Group.walk_commands:1
#: discord.ext.commands.GroupMixin.walk_commands:1 of
msgid "An iterator that recursively walks through all commands and subcommands."
msgstr ""

#: discord.ext.commands.AutoShardedBot:1 of
msgid ""
"This is similar to :class:`.Bot` except that it is derived from "
":class:`discord.AutoShardedClient` instead."
msgstr ""

#: discord.ext.commands.when_mentioned:1 of
msgid "A callable that implements a command prefix equivalent to being mentioned."
msgstr ""

#: discord.ext.commands.when_mentioned:3
#: discord.ext.commands.when_mentioned_or:3 of
msgid ""
"These are meant to be passed into the :attr:`.Bot.command_prefix` "
"attribute."
msgstr ""

#: discord.ext.commands.when_mentioned_or:1 of
msgid "A callable that implements when mentioned or other prefixes provided."
msgstr ""

#: discord.ext.commands.when_mentioned_or:13 of
msgid ""
"This callable returns another callable, so if this is done inside a "
"custom callable, you must call the returned callable, for example:"
msgstr ""

#: discord.ext.commands.when_mentioned_or:23 of
msgid ":func:`.when_mentioned`"
msgstr ""

#: ../../ext/commands/api.rst:27
msgid "Event Reference"
msgstr ""

#: ../../ext/commands/api.rst:29
msgid ""
"These events function similar to :ref:`the regular events <discord-api-"
"events>`, except they are custom to the command extension module."
msgstr ""

#: ../../ext/commands/api.rst:34
msgid ""
"An error handler that is called when an error is raised inside a command "
"either through user input error, check failure, or an error in your own "
"code."
msgstr ""

#: ../../ext/commands/api.rst:38
msgid "A default one is provided (:meth:`.Bot.on_command_error`)."
msgstr ""

#: ../../ext/commands/api.rst:40 ../../ext/commands/api.rst:52
#: ../../ext/commands/api.rst:62
msgid "The invocation context."
msgstr ""

#: ../../ext/commands/api.rst:42
msgid "The error that was raised."
msgstr ""

#: ../../ext/commands/api.rst:47
msgid ""
"An event that is called when a command is found and is about to be "
"invoked."
msgstr ""

#: ../../ext/commands/api.rst:49
msgid ""
"This event is called regardless of whether the command itself succeeds "
"via error or completes."
msgstr ""

#: ../../ext/commands/api.rst:57
msgid "An event that is called when a command has completed its invocation."
msgstr ""

#: ../../ext/commands/api.rst:59
msgid ""
"This event is called only if the command succeeded, i.e. all checks have "
"passed and the user input it correctly."
msgstr ""

#: ../../ext/commands/api.rst:68
msgid "Command"
msgstr ""

#: discord.ext.commands.command:1 of
msgid ""
"A decorator that transforms a function into a :class:`.Command` or if "
"called with :func:`.group`, :class:`.Group`."
msgstr ""

#: discord.ext.commands.command:4 of
msgid ""
"By default the ``help`` attribute is received automatically from the "
"docstring of the function and is cleaned up with the use of "
"``inspect.cleandoc``. If the docstring is ``bytes``, then it is decoded "
"into :class:`str` using utf-8 encoding."
msgstr ""

#: discord.ext.commands.command:9 of
msgid ""
"All checks added using the :func:`.check` & co. decorators are added into"
" the function. There is no way to supply your own checks through this "
"decorator."
msgstr ""

#: discord.ext.commands.command:13 of
msgid ""
"The name to create the command with. By default this uses the function "
"name unchanged."
msgstr ""

#: discord.ext.commands.command:16 of
msgid ""
"The class to construct with. By default this is :class:`.Command`. You "
"usually do not change this."
msgstr ""

#: discord.ext.commands.command:18 of
msgid ""
"Keyword arguments to pass into the construction of the class denoted by "
"``cls``."
msgstr ""

#: discord.ext.commands.command:21 of
msgid ""
":exc:`TypeError` -- If the function is not a coroutine or is already a "
"command."
msgstr ""

#: discord.ext.commands.group:1 of
msgid "A decorator that transforms a function into a :class:`.Group`."
msgstr ""

#: discord.ext.commands.group:3 of
msgid ""
"This is similar to the :func:`.command` decorator but creates a "
":class:`.Group` instead of a :class:`.Command`."
msgstr ""

#: discord.ext.commands.Command:1 of
msgid "A class that implements the protocol for a bot text command."
msgstr ""

#: discord.ext.commands.Command:3 of
msgid ""
"These are not created manually, instead they are created via the "
"decorator or functional interface."
msgstr ""

#: discord.ext.commands.Command:8 of
msgid ":class:`str` -- The name of the command."
msgstr ""

#: discord.ext.commands.Command:12 of
msgid ""
":ref:`coroutine <coroutine>` -- The coroutine that is executed when the "
"command is called."
msgstr ""

#: discord.ext.commands.Command:16 of
msgid ":class:`str` -- The long help text for the command."
msgstr ""

#: discord.ext.commands.Command:20 of
msgid ""
":class:`str` -- The short help text for the command. If this is not "
"specified then the first line of the long help text is used instead."
msgstr ""

#: discord.ext.commands.Command:25 of
msgid ":class:`str` -- A replacement for arguments in the default help text."
msgstr ""

#: discord.ext.commands.Command:29 of
msgid ":class:`list` -- The list of aliases the command can be invoked under."
msgstr ""

#: discord.ext.commands.Command:33 of
msgid ""
":class:`bool` -- A boolean that indicates if the command is currently "
"enabled. If the command is invoked while it is disabled, then "
":exc:`.DisabledCommand` is raised to the :func:`.on_command_error` event."
" Defaults to ``True``."
msgstr ""

#: discord.ext.commands.Command:40 of
msgid ""
"*Optional[command]* -- The parent command that this command belongs to. "
"``None`` if there isn't one."
msgstr ""

#: discord.ext.commands.Command:45 of
msgid ""
"A list of predicates that verifies if the command could be executed with "
"the given :class:`.Context` as the sole parameter. If an exception is "
"necessary to be thrown to signal failure, then one derived from "
":exc:`.CommandError` should be used. Note that if the checks fail then "
":exc:`.CheckFailure` exception is raised to the :func:`.on_command_error`"
" event."
msgstr ""

#: discord.ext.commands.Command:54 of
msgid ":class:`str` -- The message prefixed into the default help command."
msgstr ""

#: discord.ext.commands.Command:58 of
msgid ""
":class:`bool` -- If ``True``\\, the default help command does not show "
"this in the help output."
msgstr ""

#: discord.ext.commands.Command:63 of
msgid ""
":class:`bool` -- If ``False`` and a keyword-only argument is provided "
"then the keyword only argument is stripped and handled as if it was a "
"regular argument that handles :exc:`.MissingRequiredArgument` and default"
" values in a regular matter rather than passing the rest completely raw. "
"If ``True`` then the keyword-only argument will pass in the rest of the "
"arguments in a completely raw matter. Defaults to ``False``."
msgstr ""

#: discord.ext.commands.Command:72 of
msgid ""
":class:`bool` -- If ``True``\\, ignores extraneous strings passed to a "
"command if all its requirements are met (e.g. ``?foo a b c`` when only "
"expecting ``a`` and ``b``). Otherwise :func:`.on_command_error` and local"
" error handlers are called with :exc:`.TooManyArguments`. Defaults to "
"``True``."
msgstr ""

#: discord.ext.commands.Command.clean_params:1
#: discord.ext.commands.Group.clean_params:1 of
msgid ""
"Retrieves the parameter OrderedDict without the context or self "
"parameters."
msgstr ""

#: discord.ext.commands.Command.clean_params:3
#: discord.ext.commands.Group.clean_params:3 of
msgid "Useful for inspecting signature."
msgstr ""

#: discord.ext.commands.Command.full_parent_name:1
#: discord.ext.commands.Group.full_parent_name:1 of
msgid "Retrieves the fully qualified parent command name."
msgstr ""

#: discord.ext.commands.Command.full_parent_name:3
#: discord.ext.commands.Group.full_parent_name:3 of
msgid ""
"This the base command name required to execute it. For example, in ``?one"
" two three`` the parent name would be ``one two``."
msgstr ""

#: discord.ext.commands.Command.root_parent:1
#: discord.ext.commands.Group.root_parent:1 of
msgid "Retrieves the root parent of this command."
msgstr ""

#: discord.ext.commands.Command.root_parent:3
#: discord.ext.commands.Group.root_parent:3 of
msgid "If the command has no parents then it returns ``None``."
msgstr ""

#: discord.ext.commands.Command.root_parent:5
#: discord.ext.commands.Group.root_parent:5 of
msgid "For example in commands ``?a b c test``, the root parent is ``a``."
msgstr ""

#: discord.ext.commands.Command.qualified_name:1
#: discord.ext.commands.Group.qualified_name:1 of
msgid "Retrieves the fully qualified command name."
msgstr ""

#: discord.ext.commands.Command.qualified_name:3
#: discord.ext.commands.Group.qualified_name:3 of
msgid ""
"This is the full parent name with the command name as well. For example, "
"in ``?one two three`` the qualified name would be ``one two three``."
msgstr ""

#: discord.ext.commands.Command.is_on_cooldown:1
#: discord.ext.commands.Group.is_on_cooldown:1 of
msgid "Checks whether the command is currently on cooldown."
msgstr ""

#: discord.ext.commands.Command.is_on_cooldown:3
#: discord.ext.commands.Group.is_on_cooldown:3 of
msgid "The invocation context to use when checking the commands cooldown status."
msgstr ""

#: discord.ext.commands.Command.is_on_cooldown:6
#: discord.ext.commands.Group.is_on_cooldown:6 of
msgid "A boolean indicating if the command is on cooldown."
msgstr ""

#: discord.ext.commands.Command.reset_cooldown:1
#: discord.ext.commands.Group.reset_cooldown:1 of
msgid "Resets the cooldown on this command."
msgstr ""

#: discord.ext.commands.Command.reset_cooldown:3
#: discord.ext.commands.Group.reset_cooldown:3 of
msgid "The invocation context to reset the cooldown under."
msgstr ""

#: discord.ext.commands.Command.error:1 discord.ext.commands.Group.error:1 of
msgid "A decorator that registers a coroutine as a local error handler."
msgstr ""

#: discord.ext.commands.Command.error:3 discord.ext.commands.Group.error:3 of
msgid ""
"A local error handler is an :func:`.on_command_error` event limited to a "
"single command. However, the :func:`.on_command_error` is still invoked "
"afterwards as the catch-all."
msgstr ""

#: discord.ext.commands.Command.error:7 discord.ext.commands.Group.error:7 of
msgid "The coroutine to register as the local error handler."
msgstr ""

#: discord.ext.commands.Command.error:10 discord.ext.commands.Group.error:10 of
msgid ""
":exc:`discord.ClientException` -- The coroutine is not actually a "
"coroutine."
msgstr ""

#: discord.ext.commands.Command.before_invoke:9
#: discord.ext.commands.Group.before_invoke:9 of
msgid "See :meth:`.Bot.before_invoke` for more info."
msgstr ""

#: discord.ext.commands.Command.after_invoke:9
#: discord.ext.commands.Group.after_invoke:9 of
msgid "See :meth:`.Bot.after_invoke` for more info."
msgstr ""

#: discord.ext.commands.Command.cog_name:1
#: discord.ext.commands.Group.cog_name:1 of
msgid "The name of the cog this command belongs to. None otherwise."
msgstr ""

#: discord.ext.commands.Command.short_doc:1
#: discord.ext.commands.Group.short_doc:1 of
msgid "Gets the \"short\" documentation of a command."
msgstr ""

#: discord.ext.commands.Command.short_doc:3
#: discord.ext.commands.Group.short_doc:3 of
msgid ""
"By default, this is the :attr:`brief` attribute. If that lookup leads to "
"an empty string then the first line of the :attr:`help` attribute is used"
" instead."
msgstr ""

#: discord.ext.commands.Command.signature:1
#: discord.ext.commands.Group.signature:1 of
msgid "Returns a POSIX-like signature useful for help command output."
msgstr ""

#: discord.ext.commands.Command.can_run:3 discord.ext.commands.Group.can_run:3
#: of
msgid ""
"Checks if the command can be executed by checking all the predicates "
"inside the :attr:`.checks` attribute."
msgstr ""

#: discord.ext.commands.Command.can_run:6 discord.ext.commands.Group.can_run:6
#: of
msgid "The ctx of the command currently being invoked."
msgstr ""

#: discord.ext.commands.Command.can_run:9 discord.ext.commands.Group.can_run:9
#: of
msgid ""
":class:`CommandError` -- Any command error that was raised during a check"
" call will be propagated by this function."
msgstr ""

#: discord.ext.commands.Command.can_run:12
#: discord.ext.commands.Group.can_run:12 of
msgid "A boolean indicating if the command can be invoked."
msgstr ""

#: discord.ext.commands.Group:1 of
msgid ""
"A class that implements a grouping protocol for commands to be executed "
"as subcommands."
msgstr ""

#: discord.ext.commands.Group:4 of
msgid ""
"This class is a subclass of :class:`.Command` and thus all options valid "
"in :class:`.Command` are valid in here as well."
msgstr ""

#: discord.ext.commands.Group:9 of
msgid ""
":class:`bool` -- Indicates if the group callback should begin parsing and"
" invocation only if no subcommand was found. Useful for making it an "
"error handling function to tell the user that no subcommand was found or "
"to have different functionality in case no subcommand was found. If this "
"is ``False``, then the group callback will always be invoked first. This "
"means that the checks and the parsing dictated by its parameters will be "
"executed. Defaults to ``False``."
msgstr ""

#: discord.ext.commands.Group:20 of
msgid ""
":class:`bool` -- Indicates if the group's commands should be case "
"insensitive. Defaults to ``False``."
msgstr ""

#: discord.ext.commands.GroupMixin:1 of
msgid ""
"A mixin that implements common functionality for classes that behave "
"similar to :class:`.Group` and are allowed to register commands."
msgstr ""

#: discord.ext.commands.GroupMixin:6 of
msgid ""
":class:`dict` -- A mapping of command name to :class:`.Command` or "
"superclass objects."
msgstr ""

#: discord.ext.commands.GroupMixin:11 of
msgid ""
":class:`bool` -- Whether the commands should be case insensitive. "
"Defaults to ``False``."
msgstr ""

#: ../../ext/commands/api.rst:87
msgid "Formatters"
msgstr ""

#: discord.ext.commands.Paginator:1 of
msgid "A class that aids in paginating code blocks for Discord messages."
msgstr ""

#: discord.ext.commands.Paginator:5 of
msgid ":class:`str` -- The prefix inserted to every page. e.g. three backticks."
msgstr ""

#: discord.ext.commands.Paginator:9 of
msgid ""
":class:`str` -- The suffix appended at the end of every page. e.g. three "
"backticks."
msgstr ""

#: discord.ext.commands.Paginator:13 of
msgid ":class:`int` -- The maximum amount of codepoints allowed in a page."
msgstr ""

#: discord.ext.commands.Paginator.add_line:1 of
msgid "Adds a line to the current page."
msgstr ""

#: discord.ext.commands.Paginator.add_line:3 of
msgid "If the line exceeds the :attr:`max_size` then an exception is raised."
msgstr ""

#: discord.ext.commands.Paginator.add_line:6 of
msgid "The line to add."
msgstr ""

#: discord.ext.commands.Paginator.add_line:8 of
msgid "Indicates if another empty line should be added."
msgstr ""

#: discord.ext.commands.Paginator.add_line:11 of
msgid ""
":exc:`RuntimeError` -- The line was too big for the current "
":attr:`max_size`."
msgstr ""

#: discord.ext.commands.Paginator.close_page:1 of
msgid "Prematurely terminate a page."
msgstr ""

#: discord.ext.commands.Paginator.pages:1 of
msgid "Returns the rendered list of pages."
msgstr ""

#: discord.ext.commands.HelpFormatter:1 of
msgid ""
"The default base implementation that handles formatting of the help "
"command."
msgstr ""

#: discord.ext.commands.HelpFormatter:4 of
msgid ""
"To override the behaviour of the formatter, "
":meth:`~.HelpFormatter.format` should be overridden. A number of utility "
"functions are provided for use inside that method."
msgstr ""

#: discord.ext.commands.HelpFormatter:10 of
msgid ""
":class:`bool` -- Dictates if hidden commands should be shown in the "
"output. Defaults to ``False``."
msgstr ""

#: discord.ext.commands.HelpFormatter:15 of
msgid ""
":class:`bool` -- Dictates if commands that have their "
":attr:`.Command.checks` failed shown. Defaults to ``False``."
msgstr ""

#: discord.ext.commands.HelpFormatter:20 of
msgid ""
":class:`int` -- The maximum number of characters that fit in a line. "
"Defaults to 80."
msgstr ""

#: discord.ext.commands.HelpFormatter.has_subcommands:1 of
msgid ":class:`bool`: Specifies if the command has subcommands."
msgstr ""

#: discord.ext.commands.HelpFormatter.is_bot:1 of
msgid ":class:`bool`: Specifies if the command being formatted is the bot itself."
msgstr ""

#: discord.ext.commands.HelpFormatter.is_cog:1 of
msgid ":class:`bool`: Specifies if the command being formatted is actually a cog."
msgstr ""

#: discord.ext.commands.HelpFormatter.shorten:1 of
msgid "Shortens text to fit into the :attr:`width`."
msgstr ""

#: discord.ext.commands.HelpFormatter.max_name_size:1 of
msgid ""
":class:`int` -- Returns the largest name length of a command or if it has"
" subcommands the largest subcommand name."
msgstr ""

#: discord.ext.commands.HelpFormatter.clean_prefix:1 of
msgid ""
"The cleaned up invoke prefix. i.e. mentions are ``@name`` instead of "
"``<@id>``."
msgstr ""

#: discord.ext.commands.HelpFormatter.get_command_signature:1 of
msgid "Retrieves the signature portion of the help page."
msgstr ""

#: discord.ext.commands.HelpFormatter.filter_command_list:1 of
msgid ""
"Returns a filtered list of commands based on the two attributes provided,"
" :attr:`show_check_failure` and :attr:`show_hidden`. Also filters based "
"on if :meth:`~.HelpFormatter.is_cog` is valid."
msgstr ""

#: discord.ext.commands.HelpFormatter.filter_command_list:5 of
msgid ""
"An iterable with the filter being applied. The resulting value is a (key,"
" value) :class:`tuple` of the command name and the command itself."
msgstr ""

#: discord.ext.commands.HelpFormatter.format:1 of
msgid "Handles the actual behaviour involved with formatting."
msgstr ""

#: discord.ext.commands.HelpFormatter.format:3 of
msgid "To change the behaviour, this method should be overridden."
msgstr ""

#: discord.ext.commands.HelpFormatter.format:5
#: discord.ext.commands.HelpFormatter.format_help_for:10 of
msgid "A paginated output of the help command."
msgstr ""

#: discord.ext.commands.HelpFormatter.format_help_for:1 of
msgid ""
"Formats the help page and handles the actual heavy lifting of how the "
"help command looks like. To change the behaviour, override the "
":meth:`~.HelpFormatter.format` method."
msgstr ""

#: discord.ext.commands.HelpFormatter.format_help_for:5 of
msgid "The context of the invoked help command."
msgstr ""

#: discord.ext.commands.HelpFormatter.format_help_for:7 of
msgid "The bot or command that we are getting the help of."
msgstr ""

#: ../../ext/commands/api.rst:98
msgid "Checks"
msgstr ""

#: discord.ext.commands.check:1 of
msgid ""
"A decorator that adds a check to the :class:`.Command` or its subclasses."
" These checks could be accessed via :attr:`.Command.checks`."
msgstr ""

#: discord.ext.commands.check:4 of
msgid ""
"These checks should be predicates that take in a single parameter taking "
"a :class:`.Context`. If the check returns a ``False``\\-like value then "
"during invocation a :exc:`.CheckFailure` exception is raised and sent to "
"the :func:`.on_command_error` event."
msgstr ""

#: discord.ext.commands.check:9 of
msgid ""
"If an exception should be thrown in the predicate then it should be a "
"subclass of :exc:`.CommandError`. Any exception not subclassed from it "
"will be propagated while those subclassed will be sent to "
":func:`.on_command_error`."
msgstr ""

#: discord.ext.commands.check:16 of
msgid "These functions can either be regular functions or coroutines."
msgstr ""

#: discord.ext.commands.check:18 of
msgid "The predicate to check if the command should be invoked."
msgstr ""

#: discord.ext.commands.check:22 of
msgid "Creating a basic check to see if the command invoker is you."
msgstr ""

#: discord.ext.commands.check:34 of
msgid "Transforming common checks into its own decorator:"
msgstr ""

#: discord.ext.commands.has_role:1 of
msgid ""
"A :func:`.check` that is added that checks if the member invoking the "
"command has the role specified via the name specified."
msgstr ""

#: discord.ext.commands.has_role:4 of
msgid ""
"The name is case sensitive and must be exact. No normalisation is done in"
" the input."
msgstr ""

#: discord.ext.commands.has_role:7 of
msgid ""
"If the message is invoked in a private message context then the check "
"will return ``False``."
msgstr ""

#: discord.ext.commands.has_role:10 of
msgid "The name of the role to check."
msgstr ""

#: discord.ext.commands.has_permissions:1 of
msgid ""
"A :func:`.check` that is added that checks if the member has any of the "
"permissions necessary."
msgstr ""

#: discord.ext.commands.has_permissions:4 of
msgid ""
"The permissions passed in must be exactly like the properties shown under"
" :class:`.discord.Permissions`."
msgstr ""

#: discord.ext.commands.has_permissions:7 of
msgid ""
"This check raises a special exception, :exc:`.MissingPermissions` that is"
" derived from :exc:`.CheckFailure`."
msgstr ""

#: discord.ext.commands.has_permissions:10 of
msgid "An argument list of permissions to check for."
msgstr ""

#: discord.ext.commands.has_any_role:1 of
msgid ""
"A :func:`.check` that is added that checks if the member invoking the "
"command has **any** of the roles specified. This means that if they have "
"one out of the three roles specified, then this check will return `True`."
msgstr ""

#: discord.ext.commands.has_any_role:5 of
msgid "Similar to :func:`.has_role`\\, the names passed in must be exact."
msgstr ""

#: discord.ext.commands.has_any_role:7 of
msgid "An argument list of names to check that the member has roles wise."
msgstr ""

#: discord.ext.commands.bot_has_role:1 of
msgid "Similar to :func:`.has_role` except checks if the bot itself has the role."
msgstr ""

#: discord.ext.commands.bot_has_permissions:1 of
msgid ""
"Similar to :func:`.has_permissions` except checks if the bot itself has "
"the permissions listed."
msgstr ""

#: discord.ext.commands.bot_has_permissions:4 of
msgid ""
"This check raises a special exception, :exc:`.BotMissingPermissions` that"
" is derived from :exc:`.CheckFailure`."
msgstr ""

#: discord.ext.commands.bot_has_any_role:1 of
msgid ""
"Similar to :func:`.has_any_role` except checks if the bot itself has any "
"of the roles listed."
msgstr ""

#: discord.ext.commands.cooldown:1 of
msgid "A decorator that adds a cooldown to a :class:`.Command` or its subclasses."
msgstr ""

#: discord.ext.commands.cooldown:4 of
msgid ""
"A cooldown allows a command to only be used a specific amount of times in"
" a specific time frame. These cooldowns can be based either on a per-"
"guild, per-channel, per-user, or global basis. Denoted by the third "
"argument of ``type`` which must be of enum type ``BucketType`` which "
"could be either:"
msgstr ""

#: discord.ext.commands.cooldown:10 of
msgid "``BucketType.default`` for a global basis."
msgstr ""

#: discord.ext.commands.cooldown:11 of
msgid "``BucketType.user`` for a per-user basis."
msgstr ""

#: discord.ext.commands.cooldown:12 of
msgid "``BucketType.guild`` for a per-guild basis."
msgstr ""

#: discord.ext.commands.cooldown:13 of
msgid "``BucketType.channel`` for a per-channel basis."
msgstr ""

#: discord.ext.commands.cooldown:14 of
msgid "``BucketType.member`` for a per-member basis."
msgstr ""

#: discord.ext.commands.cooldown:16 of
msgid ""
"If a cooldown is triggered, then :exc:`.CommandOnCooldown` is triggered "
"in :func:`.on_command_error` and the local error handler."
msgstr ""

#: discord.ext.commands.cooldown:19 of
msgid "A command can only have a single cooldown."
msgstr ""

#: discord.ext.commands.cooldown:21 of
msgid "The number of times a command can be used before triggering a cooldown."
msgstr ""

#: discord.ext.commands.cooldown:23 of
msgid "The amount of seconds to wait for a cooldown when it's been triggered."
msgstr ""

#: discord.ext.commands.cooldown:25 of
msgid "The type of cooldown to have."
msgstr ""

#: discord.ext.commands.guild_only:1 of
msgid ""
"A :func:`.check` that indicates this command must only be used in a guild"
" context only. Basically, no private messages are allowed when using the "
"command."
msgstr ""

#: discord.ext.commands.guild_only:5 of
msgid ""
"This check raises a special exception, :exc:`.NoPrivateMessage` that is "
"derived from :exc:`.CheckFailure`."
msgstr ""

#: discord.ext.commands.is_owner:1 of
msgid ""
"A :func:`.check` that checks if the person invoking this command is the "
"owner of the bot."
msgstr ""

#: discord.ext.commands.is_owner:4 of
msgid "This is powered by :meth:`.Bot.is_owner`."
msgstr ""

#: discord.ext.commands.is_owner:6 of
msgid ""
"This check raises a special exception, :exc:`.NotOwner` that is derived "
"from :exc:`.CheckFailure`."
msgstr ""

#: discord.ext.commands.is_nsfw:1 of
msgid "A :func:`.check` that checks if the channel is a NSFW channel."
msgstr ""

#: ../../ext/commands/api.rst:125
msgid "Context"
msgstr ""

#: discord.ext.commands.Context:1 of
msgid "Represents the context in which a command is being invoked under."
msgstr ""

#: discord.ext.commands.Context:3 of
msgid ""
"This class contains a lot of meta data to help you understand more about "
"the invocation context. This class is not created manually and is instead"
" passed around to commands as the first parameter."
msgstr ""

#: discord.ext.commands.Context:7 of
msgid "This class implements the :class:`abc.Messageable` ABC."
msgstr ""

#: discord.ext.commands.Context:11 of
msgid ""
":class:`discord.Message` -- The message that triggered the command being "
"executed."
msgstr ""

#: discord.ext.commands.Context:15 of
msgid ":class:`.Bot` -- The bot that contains the command being executed."
msgstr ""

#: discord.ext.commands.Context:19 of
msgid ""
":class:`list` -- The list of transformed arguments that were passed into "
"the command. If this is accessed during the :func:`on_command_error` "
"event then this list could be incomplete."
msgstr ""

#: discord.ext.commands.Context:25 of
msgid ""
":class:`dict` -- A dictionary of transformed arguments that were passed "
"into the command. Similar to :attr:`args`\\, if this is accessed in the "
":func:`on_command_error` event then this dict could be incomplete."
msgstr ""

#: discord.ext.commands.Context:31 of
msgid ":class:`str` -- The prefix that was used to invoke the command."
msgstr ""

#: discord.ext.commands.Context:35 of
msgid ""
"The command (i.e. :class:`.Command` or its superclasses) that is being "
"invoked currently."
msgstr ""

#: discord.ext.commands.Context:40 of
msgid ""
":class:`str` -- The command name that triggered this invocation. Useful "
"for finding out which alias called the command."
msgstr ""

#: discord.ext.commands.Context:45 of
msgid ""
"The subcommand (i.e. :class:`.Command` or its superclasses) that was "
"invoked. If no valid subcommand was invoked then this is equal to `None`."
msgstr ""

#: discord.ext.commands.Context:51 of
msgid ""
"Optional[:class:`str`] -- The string that was attempted to call a "
"subcommand. This does not have to point to a valid registered subcommand "
"and could just point to a nonsense string. If nothing was passed to "
"attempt a call to a subcommand then this is set to `None`."
msgstr ""

#: discord.ext.commands.Context:58 of
msgid ""
":class:`bool` -- A boolean that indicates if the command failed to be "
"parsed, checked, or invoked."
msgstr ""

#: discord.ext.commands.Context.history:1 of
msgid ""
"Return an :class:`AsyncIterator` that enables receiving the destination's"
" message history."
msgstr ""

#: discord.ext.commands.Context.history:3 of
msgid ""
"You must have :attr:`~.Permissions.read_message_history` permissions to "
"use this."
msgstr ""

#: discord.ext.commands.Context.history:5 of
msgid "All parameters are optional."
msgstr ""

#: discord.ext.commands.Context.history:7 of
msgid ""
"The number of messages to retrieve. If ``None``, retrieves every message "
"in the channel. Note, however, that this would make it a slow operation."
msgstr ""

#: discord.ext.commands.Context.history:11 of
msgid ""
"Retrieve messages before this date or message. If a date is provided it "
"must be a timezone-naive datetime representing UTC time."
msgstr ""

#: discord.ext.commands.Context.history:14 of
msgid ""
"Retrieve messages after this date or message. If a date is provided it "
"must be a timezone-naive datetime representing UTC time."
msgstr ""

#: discord.ext.commands.Context.history:17 of
msgid ""
"Retrieve messages around this date or message. If a date is provided it "
"must be a timezone-naive datetime representing UTC time. When using this "
"argument, the maximum limit is 101. Note that if the limit is an even "
"number then this will return at most limit + 1 messages."
msgstr ""

#: discord.ext.commands.Context.history:22 of
msgid ""
"If set to true, return messages in oldest->newest order. If unspecified, "
"this defaults to ``False`` for most cases. However if passing in a "
"``after`` parameter then this is set to ``True``. This avoids getting "
"messages out of order in the ``after`` case."
msgstr ""

#: discord.ext.commands.Context.history:28 of
msgid ""
":exc:`Forbidden` -- You do not have permissions to get channel message "
"history."
msgstr ""

#: discord.ext.commands.Context.history:29 of
msgid ":exc:`HTTPException` -- The request to get message history failed."
msgstr ""

#: discord.ext.commands.Context.history of
msgid "Yields"
msgstr ""

#: discord.ext.commands.Context.history:31 of
msgid ":class:`Message` -- The message with the message data parsed."
msgstr ""

#: discord.ext.commands.Context.history:35 of
msgid "Usage ::"
msgstr ""

#: discord.ext.commands.Context.history:42 of
msgid "Flattening into a list: ::"
msgstr ""

#: discord.ext.commands.Context.typing:1 of
msgid ""
"Returns a context manager that allows you to type for an indefinite "
"period of time."
msgstr ""

#: discord.ext.commands.Context.typing:3 of
msgid "This is useful for denoting long computations in your bot."
msgstr ""

#: discord.ext.commands.Context.typing:7 of
msgid ""
"This is both a regular context manager and an async context manager. This"
" means that both ``with`` and ``async with`` work with this."
msgstr ""

#: discord.ext.commands.Context.typing:10 of
msgid "Example Usage: ::"
msgstr ""

#: discord.ext.commands.Context.valid:1 of
msgid "Checks if the invocation context is valid to be invoked with."
msgstr ""

#: discord.ext.commands.Context.cog:1 of
msgid ""
"Returns the cog associated with this context's command. None if it does "
"not exist."
msgstr ""

#: discord.ext.commands.Context.get_message:3 of
msgid "Retrieves a single :class:`Message` from the destination."
msgstr ""

#: discord.ext.commands.Context.get_message:5 of
msgid "This can only be used by bot accounts."
msgstr ""

#: discord.ext.commands.Context.get_message:7 of
msgid "The message ID to look for."
msgstr ""

#: discord.ext.commands.Context.get_message:10 of
msgid "The message asked for."
msgstr ""

#: discord.ext.commands.Context.get_message:11
#: discord.ext.commands.Context.send:40 of
msgid ":class:`Message`"
msgstr ":class:`Message`"

#: discord.ext.commands.Context.get_message:13 of
msgid ":exc:`NotFound` -- The specified message was not found."
msgstr ""

#: discord.ext.commands.Context.get_message:14 of
msgid ""
":exc:`Forbidden` -- You do not have the permissions required to get a "
"message."
msgstr ""

#: discord.ext.commands.Context.get_message:15 of
msgid ":exc:`HTTPException` -- Retrieving the message failed."
msgstr ""

#: discord.ext.commands.Context.invoke:3 of
msgid "Calls a command with the arguments given."
msgstr ""

#: discord.ext.commands.Context.invoke:5 of
msgid ""
"This is useful if you want to just call the callback that a "
":class:`.Command` holds internally."
msgstr ""

#: discord.ext.commands.Context.invoke:8 of
msgid "You do not pass in the context as it is done for you."
msgstr ""

#: discord.ext.commands.Context.invoke:10 of
msgid "The first parameter passed **must** be the command being invoked."
msgstr ""

#: discord.ext.commands.Context.invoke:12 of
msgid "A command or superclass of a command that is going to be called."
msgstr ""

#: discord.ext.commands.Context.invoke:14 of
msgid "The arguments to to use."
msgstr ""

#: discord.ext.commands.Context.invoke:15 of
msgid "The keyword arguments to use."
msgstr ""

#: discord.ext.commands.Context.pins:3 of
msgid "Returns a :class:`list` of :class:`Message` that are currently pinned."
msgstr ""

#: discord.ext.commands.Context.pins:5 of
msgid ":exc:`HTTPException` -- Retrieving the pinned messages failed."
msgstr ""

#: discord.ext.commands.Context.reinvoke:3 of
msgid "Calls the command again."
msgstr ""

#: discord.ext.commands.Context.reinvoke:5 of
msgid ""
"This is similar to :meth:`~.Context.invoke` except that it bypasses "
"checks, cooldowns, and error handlers."
msgstr ""

#: discord.ext.commands.Context.reinvoke:10 of
msgid ""
"If you want to bypass :exc:`.UserInputError` derived exceptions, it is "
"recommended to use the regular :meth:`~.Context.invoke` as it will work "
"more naturally. After all, this will end up using the old arguments the "
"user has used and will thus just fail again."
msgstr ""

#: discord.ext.commands.Context.reinvoke:16 of
msgid "Whether to call the before and after invoke hooks."
msgstr ""

#: discord.ext.commands.Context.reinvoke:18 of
msgid ""
"Whether to start the call chain from the very beginning or where we left "
"off (i.e. the command that caused the error). The default is to start "
"where we left off."
msgstr ""

#: discord.ext.commands.Context.send:3 of
msgid "Sends a message to the destination with the content given."
msgstr ""

#: discord.ext.commands.Context.send:5 of
msgid ""
"The content must be a type that can convert to a string through "
"``str(content)``. If the content is set to ``None`` (the default), then "
"the ``embed`` parameter must be provided."
msgstr ""

#: discord.ext.commands.Context.send:9 of
msgid ""
"To upload a single file, the ``file`` parameter should be used with a "
"single :class:`File` object. To upload multiple files, the ``files`` "
"parameter should be used with a :class:`list` of :class:`File` objects. "
"**Specifying both parameters will lead to an exception**."
msgstr ""

#: discord.ext.commands.Context.send:14 of
msgid ""
"If the ``embed`` parameter is provided, it must be of type :class:`Embed`"
" and it must be a rich embed type."
msgstr ""

#: discord.ext.commands.Context.send:17 of
msgid "The content of the message to send."
msgstr ""

#: discord.ext.commands.Context.send:18 of
msgid "Indicates if the message should be sent using text-to-speech."
msgstr ""

#: discord.ext.commands.Context.send:20 of
msgid "The rich embed for the content."
msgstr ""

#: discord.ext.commands.Context.send:22 of
msgid "The file to upload."
msgstr ""

#: discord.ext.commands.Context.send:24 of
msgid "A list of files to upload. Must be a maximum of 10."
msgstr ""

#: discord.ext.commands.Context.send:26 of
msgid ""
"The nonce to use for sending this message. If the message was "
"successfully sent, then the message will have a nonce with this value."
msgstr ""

#: discord.ext.commands.Context.send:29 of
msgid ""
"If provided, the number of seconds to wait in the background before "
"deleting the message we just sent. If the deletion fails, then it is "
"silently ignored."
msgstr ""

#: discord.ext.commands.Context.send:34 of
msgid ":exc:`HTTPException` -- Sending the message failed."
msgstr ""

#: discord.ext.commands.Context.send:35 of
msgid ""
":exc:`Forbidden` -- You do not have the proper permissions to send the "
"message."
msgstr ""

#: discord.ext.commands.Context.send:36 of
msgid ""
":exc:`InvalidArgument` -- The ``files`` list is not of the appropriate "
"size or you specified both ``file`` and ``files``."
msgstr ""

#: discord.ext.commands.Context.send:39 of
msgid "The message that was sent."
msgstr ""

#: discord.ext.commands.Context.trigger_typing:3 of
msgid "Triggers a *typing* indicator to the destination."
msgstr ""

#: discord.ext.commands.Context.trigger_typing:5 of
msgid ""
"*Typing* indicator will go away after 10 seconds, or after a message is "
"sent."
msgstr ""

#: discord.ext.commands.Context.guild:1 of
msgid ""
"Returns the guild associated with this context's command. None if not "
"available."
msgstr ""

#: discord.ext.commands.Context.channel:1 of
msgid ""
"Returns the channel associated with this context's command. Shorthand for"
" :attr:`Message.channel`."
msgstr ""

#: discord.ext.commands.Context.author:1 of
msgid ""
"Returns the author associated with this context's command. Shorthand for "
":attr:`Message.author`"
msgstr ""

#: discord.ext.commands.Context.me:1 of
msgid ""
"Similar to :attr:`Guild.me` except it may return the :class:`ClientUser` "
"in private message contexts."
msgstr ""

#: discord.ext.commands.Context.voice_client:1 of
msgid ""
"Optional[:class:`VoiceClient`] -- A shortcut to "
":attr:`Guild.voice_client`\\, if applicable."
msgstr ""

#: ../../ext/commands/api.rst:141
msgid "Converters"
msgstr ""

#: discord.ext.commands.Converter:1 of
msgid ""
"The base class of custom converters that require the :class:`.Context` to"
" be passed to be useful."
msgstr ""

#: discord.ext.commands.Converter:4 of
msgid ""
"This allows you to implement converters that function similar to the "
"special cased ``discord`` classes."
msgstr ""

#: discord.ext.commands.Converter:7 of
msgid ""
"Classes that derive from this should override the "
":meth:`~.Converter.convert` method to do its conversion logic. This "
"method must be a coroutine."
msgstr ""

#: discord.ext.commands.CategoryChannelConverter.convert:3
#: discord.ext.commands.ColourConverter.convert:3
#: discord.ext.commands.Converter.convert:3
#: discord.ext.commands.EmojiConverter.convert:3
#: discord.ext.commands.GameConverter.convert:3
#: discord.ext.commands.InviteConverter.convert:3
#: discord.ext.commands.MemberConverter.convert:3
#: discord.ext.commands.PartialEmojiConverter.convert:3
#: discord.ext.commands.RoleConverter.convert:3
#: discord.ext.commands.TextChannelConverter.convert:3
#: discord.ext.commands.UserConverter.convert:3
#: discord.ext.commands.VoiceChannelConverter.convert:3
#: discord.ext.commands.clean_content.convert:3 of
msgid "The method to override to do conversion logic."
msgstr ""

#: discord.ext.commands.CategoryChannelConverter.convert:5
#: discord.ext.commands.ColourConverter.convert:5
#: discord.ext.commands.Converter.convert:5
#: discord.ext.commands.EmojiConverter.convert:5
#: discord.ext.commands.GameConverter.convert:5
#: discord.ext.commands.InviteConverter.convert:5
#: discord.ext.commands.MemberConverter.convert:5
#: discord.ext.commands.PartialEmojiConverter.convert:5
#: discord.ext.commands.RoleConverter.convert:5
#: discord.ext.commands.TextChannelConverter.convert:5
#: discord.ext.commands.UserConverter.convert:5
#: discord.ext.commands.VoiceChannelConverter.convert:5
#: discord.ext.commands.clean_content.convert:5 of
msgid ""
"If an error is found while converting, it is recommended to raise a "
":exc:`.CommandError` derived exception as it will properly propagate to "
"the error handlers."
msgstr ""

#: discord.ext.commands.CategoryChannelConverter.convert:9
#: discord.ext.commands.ColourConverter.convert:9
#: discord.ext.commands.Converter.convert:9
#: discord.ext.commands.EmojiConverter.convert:9
#: discord.ext.commands.GameConverter.convert:9
#: discord.ext.commands.InviteConverter.convert:9
#: discord.ext.commands.MemberConverter.convert:9
#: discord.ext.commands.PartialEmojiConverter.convert:9
#: discord.ext.commands.RoleConverter.convert:9
#: discord.ext.commands.TextChannelConverter.convert:9
#: discord.ext.commands.UserConverter.convert:9
#: discord.ext.commands.VoiceChannelConverter.convert:9
#: discord.ext.commands.clean_content.convert:9 of
msgid "The invocation context that the argument is being used in."
msgstr ""

#: discord.ext.commands.CategoryChannelConverter.convert:11
#: discord.ext.commands.ColourConverter.convert:11
#: discord.ext.commands.Converter.convert:11
#: discord.ext.commands.EmojiConverter.convert:11
#: discord.ext.commands.GameConverter.convert:11
#: discord.ext.commands.InviteConverter.convert:11
#: discord.ext.commands.MemberConverter.convert:11
#: discord.ext.commands.PartialEmojiConverter.convert:11
#: discord.ext.commands.RoleConverter.convert:11
#: discord.ext.commands.TextChannelConverter.convert:11
#: discord.ext.commands.UserConverter.convert:11
#: discord.ext.commands.VoiceChannelConverter.convert:11
#: discord.ext.commands.clean_content.convert:11 of
msgid "The argument that is being converted."
msgstr ""

#: discord.ext.commands.MemberConverter:1 of
msgid "Converts to a :class:`Member`."
msgstr ""

#: discord.ext.commands.CategoryChannelConverter:3
#: discord.ext.commands.MemberConverter:3 discord.ext.commands.RoleConverter:4
#: discord.ext.commands.TextChannelConverter:3
#: discord.ext.commands.VoiceChannelConverter:3 of
msgid ""
"All lookups are via the local guild. If in a DM context, then the lookup "
"is done by the global cache."
msgstr ""

#: discord.ext.commands.CategoryChannelConverter:6
#: discord.ext.commands.EmojiConverter:7 discord.ext.commands.MemberConverter:6
#: discord.ext.commands.RoleConverter:7
#: discord.ext.commands.TextChannelConverter:6
#: discord.ext.commands.UserConverter:5
#: discord.ext.commands.VoiceChannelConverter:6 of
msgid "The lookup strategy is as follows (in order):"
msgstr ""

#: discord.ext.commands.CategoryChannelConverter:8
#: discord.ext.commands.EmojiConverter:9 discord.ext.commands.MemberConverter:8
#: discord.ext.commands.RoleConverter:9
#: discord.ext.commands.TextChannelConverter:8
#: discord.ext.commands.UserConverter:7
#: discord.ext.commands.VoiceChannelConverter:8 of
msgid "Lookup by ID."
msgstr ""

#: discord.ext.commands.CategoryChannelConverter:9
#: discord.ext.commands.MemberConverter:9 discord.ext.commands.RoleConverter:10
#: discord.ext.commands.TextChannelConverter:9
#: discord.ext.commands.UserConverter:8
#: discord.ext.commands.VoiceChannelConverter:9 of
msgid "Lookup by mention."
msgstr ""

#: discord.ext.commands.MemberConverter:10 discord.ext.commands.UserConverter:9
#: of
msgid "Lookup by name#discrim"
msgstr ""

#: discord.ext.commands.CategoryChannelConverter:10
#: discord.ext.commands.EmojiConverter:11
#: discord.ext.commands.MemberConverter:11
#: discord.ext.commands.RoleConverter:11
#: discord.ext.commands.TextChannelConverter:10
#: discord.ext.commands.UserConverter:10
#: discord.ext.commands.VoiceChannelConverter:10 of
msgid "Lookup by name"
msgstr ""

#: discord.ext.commands.MemberConverter:12 of
msgid "Lookup by nickname"
msgstr ""

#: discord.ext.commands.UserConverter:1 of
msgid "Converts to a :class:`User`."
msgstr ""

#: discord.ext.commands.UserConverter:3 of
msgid "All lookups are via the global user cache."
msgstr ""

#: discord.ext.commands.TextChannelConverter:1 of
msgid "Converts to a :class:`TextChannel`."
msgstr ""

#: discord.ext.commands.VoiceChannelConverter:1 of
msgid "Converts to a :class:`VoiceChannel`."
msgstr ""

#: discord.ext.commands.CategoryChannelConverter:1 of
msgid "Converts to a :class:`CategoryChannel`."
msgstr ""

#: discord.ext.commands.InviteConverter:1 of
msgid "Converts to a :class:`Invite`."
msgstr ""

#: discord.ext.commands.InviteConverter:3 of
msgid "This is done via an HTTP request using :meth:`.Bot.get_invite`."
msgstr ""

#: discord.ext.commands.RoleConverter:1 of
msgid "Converts to a :class:`Role`."
msgstr ""

#: discord.ext.commands.GameConverter:1 of
msgid "Converts to :class:`Game`."
msgstr ""

#: discord.ext.commands.ColourConverter:1 of
msgid "Converts to a :class:`Colour`."
msgstr ""

#: discord.ext.commands.ColourConverter:3 of
msgid "The following formats are accepted:"
msgstr ""

#: discord.ext.commands.ColourConverter:5 of
msgid "``0x<hex>``"
msgstr ""

#: discord.ext.commands.ColourConverter:6 of
msgid "``#<hex>``"
msgstr ""

#: discord.ext.commands.ColourConverter:7 of
msgid "``0x#<hex>``"
msgstr ""

#: discord.ext.commands.ColourConverter:8 of
msgid "Any of the ``classmethod`` in :class:`Colour`"
msgstr ""

#: discord.ext.commands.ColourConverter:10 of
msgid "The ``_`` in the name can be optionally replaced with spaces."
msgstr ""

#: discord.ext.commands.EmojiConverter:1 of
msgid "Converts to a :class:`Emoji`."
msgstr ""

#: discord.ext.commands.EmojiConverter:4 of
msgid ""
"All lookups are done for the local guild first, if available. If that "
"lookup fails, then it checks the client's global cache."
msgstr ""

#: discord.ext.commands.EmojiConverter:10 of
msgid "Lookup by extracting ID from the emoji."
msgstr ""

#: discord.ext.commands.PartialEmojiConverter:1 of
msgid "Converts to a :class:`PartialEmoji`."
msgstr ""

#: discord.ext.commands.PartialEmojiConverter:4 of
msgid "This is done by extracting the animated flag, name and ID from the emoji."
msgstr ""

#: discord.ext.commands.clean_content:1 of
msgid "Converts the argument to mention scrubbed version of said content."
msgstr ""

#: discord.ext.commands.clean_content:4 of
msgid "This behaves similarly to :attr:`.Message.clean_content`."
msgstr ""

#: discord.ext.commands.clean_content:8 of
msgid ":obj:`bool` -- Whether to clean channel mentions."
msgstr ""

#: discord.ext.commands.clean_content:12 of
msgid ":obj:`bool` -- Whether to use nicknames when transforming mentions."
msgstr ""

#: discord.ext.commands.clean_content:16 of
msgid ":obj:`bool` -- Whether to also escape special markdown characters."
msgstr ""

#: ../../ext/commands/api.rst:184
msgid ""
"A special converter that greedily consumes arguments until it can't. As a"
" consequence of this behaviour, most input errors are silently discarded,"
" since it is used as an indicator of when to stop parsing."
msgstr ""

#: ../../ext/commands/api.rst:188
msgid ""
"When a parser error is met the greedy converter stops converting, undoes "
"the internal string parsing routine, and continues parsing regularly."
msgstr ""

#: ../../ext/commands/api.rst:191
msgid "For example, in the following code:"
msgstr ""

#: ../../ext/commands/api.rst:199
msgid ""
"An invocation of ``[p]test 1 2 3 4 5 6 hello`` would pass ``numbers`` "
"with ``[1, 2, 3, 4, 5, 6]`` and ``reason`` with ``hello``\\."
msgstr ""

#: ../../ext/commands/api.rst:202
msgid "For more information, check :ref:`ext_commands_special_converters`."
msgstr ""

#: ../../ext/commands/api.rst:207
msgid "Errors"
msgstr "エラー"

#: discord.ext.commands.CommandError:1 of
msgid "The base exception type for all command related errors."
msgstr "コマンドに関連するエラーすべての基礎となる例外。"

#: discord.ext.commands.CommandError:3 of
msgid "This inherits from :exc:`discord.DiscordException`."
msgstr "これは :exc:`discord.DiscordException` を継承しています。"

#: discord.ext.commands.CommandError:5 of
msgid ""
"This exception and exceptions derived from it are handled in a special "
"way as they are caught and passed into a special event from "
":class:`.Bot`\\, :func:`on_command_error`."
msgstr ""
"この例外及び、ここから派生した例外は、キャッチされると :class:`.Bot` の :func:`on_command_error` "
"に渡され、特別な方法で処理されます。"

#: discord.ext.commands.ConversionError:1 of
msgid "Exception raised when a Converter class raises non-CommandError."
msgstr "Converter クラスで、CommandErrorではない例外が発生した際に、発生する例外。"

#: discord.ext.commands.ConversionError:3 discord.ext.commands.UserInputError:4
#: of
msgid "This inherits from :exc:`.CommandError`."
msgstr ""

#: discord.ext.commands.ConversionError:7 of
msgid ":class:`discord.ext.commands.Converter` -- The converter that failed."
msgstr ":class:`discord.ext.commands.Converter` -- 例外が発生したConverter."

#: discord.ext.commands.CommandInvokeError:5
#: discord.ext.commands.ConversionError:11 of
msgid ""
"The original exception that was raised. You can also get this via the "
"``__cause__`` attribute."
msgstr "Converter内で発生した元の例外。 ``__cause__`` からも取得できます。"

#: discord.ext.commands.MissingRequiredArgument:1 of
msgid ""
"Exception raised when parsing a command and a parameter that is required "
"is not encountered."
msgstr "コマンドのパラメータ解析の際、要求されたパラメータに値が渡されていない場合に発生します。"

#: discord.ext.commands.MissingRequiredArgument:6 of
msgid ":class:`inspect.Parameter` -- The argument that is missing."
msgstr ":class:`inspect.Parameter` -- 値が渡されなかった引数。"

#: discord.ext.commands.BadArgument:1 of
msgid ""
"Exception raised when a parsing or conversion failure is encountered on "
"an argument to pass into a command."
msgstr "コマンドの引数に渡された値の解析、または変換に失敗した場合に発生する例外。"

#: discord.ext.commands.BadUnionArgument:1 of
msgid ""
"Exception raised when a :class:`typing.Union` converter fails for all its"
" associated types."
msgstr ""

#: discord.ext.commands.BadUnionArgument:6 of
msgid ":class:`inspect.Parameter` -- The parameter that failed being converted."
msgstr ""

#: discord.ext.commands.BadUnionArgument:10 of
msgid ""
"*Tuple[Type, ...]* -- A tuple of converters attempted in conversion, in "
"order of failure."
msgstr ""

#: discord.ext.commands.BadUnionArgument:14 of
msgid ""
"List[:class:`CommandError`] -- A list of errors that were caught from "
"failing the conversion."
msgstr ""

#: discord.ext.commands.NoPrivateMessage:1 of
msgid ""
"Exception raised when an operation does not work in private message "
"contexts."
msgstr "プライベートメッセージコンテキストで、要求された処理が実行できない場合に発生する例外。"

#: discord.ext.commands.CheckFailure:1 of
msgid ""
"Exception raised when the predicates in :attr:`.Command.checks` have "
"failed."
msgstr ""

#: discord.ext.commands.CommandNotFound:1 of
msgid ""
"Exception raised when a command is attempted to be invoked but no command"
" under that name is found."
msgstr "コマンドを呼び出す際に、指定された名前を持つコマンドが存在していなかった場合に発生する例外。"

#: discord.ext.commands.CommandNotFound:4 of
msgid ""
"This is not raised for invalid subcommands, rather just the initial main "
"command that is attempted to be invoked."
msgstr ""

#: discord.ext.commands.DisabledCommand:1 of
msgid "Exception raised when the command being invoked is disabled."
msgstr "呼び出そうとしたコマンドが無効化されていた際に発生する例外。"

#: discord.ext.commands.CommandInvokeError:1 of
msgid "Exception raised when the command being invoked raised an exception."
msgstr ""

#: discord.ext.commands.TooManyArguments:1 of
msgid ""
"Exception raised when the command was passed too many arguments and its "
":attr:`.Command.ignore_extra` attribute was not set to ``True``."
msgstr ""

#: discord.ext.commands.UserInputError:1 of
msgid ""
"The base exception type for errors that involve errors regarding user "
"input."
msgstr ""

#: discord.ext.commands.CommandOnCooldown:1 of
msgid "Exception raised when the command being invoked is on cooldown."
msgstr ""

#: discord.ext.commands.CommandOnCooldown:5 of
msgid ""
"*Cooldown* -- A class with attributes ``rate``, ``per``, and ``type`` "
"similar to the :func:`.cooldown` decorator."
msgstr ""

#: discord.ext.commands.CommandOnCooldown:10 of
msgid ""
":class:`float` -- The amount of seconds to wait before you can retry "
"again."
msgstr ""

#: discord.ext.commands.NotOwner:1 of
msgid "Exception raised when the message author is not the owner of the bot."
msgstr ""

#: discord.ext.commands.MissingPermissions:1 of
msgid ""
"Exception raised when the command invoker lacks permissions to run "
"command."
msgstr ""

#: discord.ext.commands.BotMissingPermissions:5
#: discord.ext.commands.MissingPermissions:6 of
msgid ":class:`list` -- The required permissions that are missing."
msgstr ""

#: discord.ext.commands.BotMissingPermissions:1 of
msgid "Exception raised when the bot lacks permissions to run command."
msgstr ""

#~ msgid ""
#~ "The *bytes-like* object representing the"
#~ " icon. See :meth:`~ClientUser.edit` for "
#~ "more details on what is expected."
#~ msgstr ""

#~ msgid ""
#~ "The factory class that will be "
#~ "used to create the context. By "
#~ "default, this is :class:`.Context`. Should "
#~ "a custom class be provided, it "
#~ "must be similar enough to "
#~ ":class:`.Context`'s interface."
#~ msgstr ""

#~ msgid ""
#~ "*Optional[command]* -- The parent command "
#~ "that this command belongs to. ``None``"
#~ " is there isn't one."
#~ msgstr ""

